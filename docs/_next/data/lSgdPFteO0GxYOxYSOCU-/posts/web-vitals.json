{
  "pageProps": {
    "post": {
      "title": "Web Vitals",
      "slug": "web-vitals",
      "content": "<p>CRA를 통해 프로젝트를 생성하면 Web-Vitals를 봤을 겁니다. 이 Web Vitals은 어떤 작업을 하고 어떻게 사용하는 것 일까요?</p>\n<h2>Overview</h2>\n<p>Web Vietals은 웹에서 좋은 사용자 경험을 제공하는데 필수적인 품질에 대해 구글이 제공하는 지표입니다.</p>\n<p>Google은 web 성능을 측정할 수 있는 여러 tools들을 제공했지만 일부 개발자들만 유용하게 사용할 뿐 많은 개발자들이 무관심했습니다.\n이러한 문제를 해결하기 위해 Web Vitals의 환경을 단순화하고 사이트 성능 지표에 가장 중요한 Core Web Vitals에 집중하도록 돕게 발전했습니다.</p>\n<h2>Core Web Vitals</h2>\n<p>Core Web Vitals는 Web Vitals 중 가장 중요하게 생각되는 부분집합으로 LCP(Largest Contents Pain), FID(First Input Delay), CLS(Cumulative Layout Shift)가 포함되어 있습니다.</p>\n<ul>\n<li><strong>Largest Contentful Paint (LCP)</strong>: 페이지가 처음 로드되기 시작한 시점을 기준으로 뷰포트 내에 표시되는 가장 큰 이미지 또는 텍스트 블록의 렌더링 시간을 측정합니다.</li>\n<li><strong>First Input Delay (FID)</strong>: 사용자가 페이지와 처음 상호작용한 시간(ex: 링크나 버튼을 클릭하거나 JavaScript 기반 컨트롤을 사용할 때)부터 실제로 이벤트 핸들러 처리를 시작할 수 때까지의 시간을 측정합니다.</li>\n<li><strong>Cumulative Layout Shift (CLS)</strong>: 예기치 않은 <em>layout sift</em> 에 대한 모든 개별 레이아웃 이동 점수들의 합계를 측정합니다. <em>layout sift</em>는 element가 렌더링 된 프레임에서 다음 프레임으로 위치가 변경될때 마다 발생합니다.</li>\n</ul>\n<h2>Core Web Vitals을 측정하고 레포팅할 수 있는 Tools</h2>\n<p>Google은 Core Web Vitals가 모든 web 경험에서 매우 중요하다고 생각합니다. 결과적으로 인기있는 Web Vitals 측정 도구들은 Core Web Vitals을 측정할 있습니다.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>LCP</th>\n<th>FID</th>\n<th>CLS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://developers.google.com/web/tools/chrome-user-experience-report\">Chrome User Experience Report</a></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><a href=\"https://developers.google.com/speed/pagespeed/insights/\">PageSpeed Insights</a></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><a href=\"https://support.google.com/webmasters/answer/9205520\">Search Console (Core Web Vitals report)</a></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n</tbody>\n</table>\n<h2>JavaScript로 Core Web Vitals 측정하기</h2>\n<p>Core Web Vitals는 standard web API를 사용하여 JavaScript에서 측정할 수 있습니다.</p>\n<p>가장 쉬운 방법은 <a href=\"https://github.com/GoogleChrome/web-vitals\">web-vitals</a> JavaScript library를 사용하는 방법입니다. 크기가 작고, production에서 사용할 때도 문제가 없으며 위에 나열된 Google tools에서 측정하는 방식으로 동일하게 측정합니다.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> getCLS<span class=\"token punctuation\">,</span> getFID<span class=\"token punctuation\">,</span> getLCP <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"web-vitals\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sendToAnalytics</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">metric</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>metric<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Use `navigator.sendBeacon()` if available, falling back to `fetch()`.</span>\n  <span class=\"token punctuation\">(</span><span class=\"token dom variable\">navigator</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">sendBeacon</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token dom variable\">navigator</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sendBeacon</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/analytics\"</span><span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/analytics\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> body<span class=\"token punctuation\">,</span> method<span class=\"token operator\">:</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span> keepalive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getCLS</span><span class=\"token punctuation\">(</span>sendToAnalytics<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">getFID</span><span class=\"token punctuation\">(</span>sendToAnalytics<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">getLCP</span><span class=\"token punctuation\">(</span>sendToAnalytics<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Web Vitals library를 사용하여 Core Web Vitals를 측정하고 analytics endpoints로 전송하도록 사이트를 구성한 후, data를 집계하고 레포팅하여 페이징 방문자들의 75%이상이 권장 thresholds를 충족하는지 확인해야합니다.</p>\n<h2>Use Case</h2>\n<p>저는 Next.js 프로젝트에 web-vitals를 적용해보았습니다.\n<a href=\"https://nextjs.org/docs/advanced-features/measuring-performance\">https://nextjs.org/docs/advanced-features/measuring-performance</a></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">reportWebVitals</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Use `window.gtag` if you initialized Google Analytics as this example:</span>\n  <span class=\"token comment\">// https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/pages/_document.js</span>\n  <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">gtag</span><span class=\"token punctuation\">(</span><span class=\"token string\">'event'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    event_category<span class=\"token operator\">:</span>\n      label <span class=\"token operator\">===</span> <span class=\"token string\">'web-vital'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'Web Vitals'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Next.js custom metric'</span><span class=\"token punctuation\">,</span>\n    value<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">round</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'CLS'</span> <span class=\"token operator\">?</span> value <span class=\"token operator\">*</span> <span class=\"token number\">1000</span> <span class=\"token operator\">:</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// values must be integers</span>\n    event_label<span class=\"token operator\">:</span> id<span class=\"token punctuation\">,</span> <span class=\"token comment\">// id unique to current page load</span>\n    non_interaction<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// avoids affecting bounce rate.</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>다음과 같이 구글 analytics에서 이벤트가 로깅된 것을 확인할 수 있습니다.</p>\n<p><img src=\"/images/web-vitals-event.png\" alt=\"web-vitals-event\"></p>\n<p>로깅된 결과를 그래프로 볼 수 있는, GoogleChromeLabs에서 만든 오픈소스가 존재하는데, 바로 <a href=\"https://github.com/GoogleChromeLabs/web-vitals-report\">Web Vitals Report</a> 입니다.  참고로 <a href=\"https://web-vitals-report.web.app/\">Web Service</a>도 제공하고 있습니다.</p>\n<p>GA4는 아직 지원하지 않기에, GA4 이하에서만 확인할 수 있습니다.\n제공하는 정보를 보면, 모바일 or 데스크탑으로 유입된 유저들에 대한 Core Web Vitals를 수집하고, 평균점수를 확인 할 수 있습니다. 페이지별 Web Vitals과 여러 유저환경에서의 점수를 측정할 수 있어, 잘 활용한다면 매우 유의미한 결과를 얻을 수 있을 것이라 생각됩니다.\n<img src=\"https://user-images.githubusercontent.com/326742/101584324-3f9a0900-3992-11eb-8f2d-182f302fb67b.png\" alt=\"\"></p>",
      "tags": [{ "slug": "web", "name": "Web" }]
    }
  },
  "__N_SSG": true
}
