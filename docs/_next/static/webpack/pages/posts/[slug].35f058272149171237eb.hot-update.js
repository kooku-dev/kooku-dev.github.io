webpackHotUpdate_N_E('pages/posts/[slug]', {
  /***/ './src/pages/posts/[slug].tsx':
    /*!************************************!*\
  !*** ./src/pages/posts/[slug].tsx ***!
  \************************************/
    /*! exports provided: __N_SSG, default */
    /***/ function (module, __webpack_exports__, __webpack_require__) {
      'use strict';
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__N_SSG", function() { return __N_SSG; });\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled/base */ "./node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js");\n/* harmony import */ var _mdi_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @mdi/js */ "./node_modules/@mdi/js/mdi.js");\n/* harmony import */ var _mdi_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @mdi/react */ "./node_modules/@mdi/react/Icon.js");\n/* harmony import */ var _mdi_react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_mdi_react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_client_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/client/router */ "./node_modules/next/dist/client/router.js");\n/* harmony import */ var next_dist_client_router__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_client_router__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/head */ "./node_modules/next/head.js");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _components_CoverImage__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/components/CoverImage */ "./src/components/CoverImage/index.tsx");\n/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/styles */ "./src/styles/index.ts");\n/* harmony import */ var _styles_container_SectionContainer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @/styles/container/SectionContainer */ "./src/styles/container/SectionContainer.ts");\n/* harmony import */ var _styles_css__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @/styles/css */ "./src/styles/css/index.ts");\n/* harmony import */ var _styles_MarkdownStyle__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @/styles/MarkdownStyle */ "./src/styles/MarkdownStyle.ts");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @/utils */ "./src/utils/index.ts");\n/* harmony import */ var _meta_config__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ~/meta-config */ "./meta-config.ts");\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @emotion/react */ "./node_modules/@emotion/react/dist/emotion-react.browser.esm.js");\n\n\nvar _jsxFileName = "/Users/mingyugu/Project/kooku/kooku-log/src/pages/posts/[slug].tsx",\n    _this = undefined,\n    _s = $RefreshSig$();\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn\'t supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar Post = function Post(_ref) {\n  _s();\n\n  var post = _ref.post;\n  var content = post.content,\n      cover = post.cover,\n      slug = post.slug,\n      title = post.title,\n      tags = post.tags;\n\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_5__["useState"])(false),\n      isLike = _useState[0],\n      setIsLike = _useState[1];\n\n  var router = Object(next_dist_client_router__WEBPACK_IMPORTED_MODULE_3__["useRouter"])();\n  Object(react__WEBPACK_IMPORTED_MODULE_5__["useEffect"])(function () {\n    try {\n      var _localStorage$getItem;\n\n      var likes = JSON.parse((_localStorage$getItem = localStorage.getItem(\'likes\')) !== null && _localStorage$getItem !== void 0 ? _localStorage$getItem : \'[]\');\n\n      if (likes.indexOf(slug) !== -1) {\n        setIsLike(true);\n      } else {\n        setIsLike(false);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }, []);\n  var toggleLike = Object(react__WEBPACK_IMPORTED_MODULE_5__["useCallback"])(function () {\n    try {\n      var _localStorage$getItem2;\n\n      var likes = JSON.parse((_localStorage$getItem2 = localStorage.getItem(\'likes\')) !== null && _localStorage$getItem2 !== void 0 ? _localStorage$getItem2 : \'[]\');\n\n      if (isLike) {\n        likes.splice(likes.indexOf(slug), 1);\n      } else {\n        likes.push(slug);\n      }\n\n      localStorage.setItem(\'likes\', JSON.stringify(likes));\n      setIsLike(!isLike);\n    } catch (error) {\n      console.error(error);\n    }\n  }, [isLike]);\n  var closePost = Object(react__WEBPACK_IMPORTED_MODULE_5__["useCallback"])(function () {\n    router.replace(\'/\');\n  }, []);\n  var shareLink = Object(react__WEBPACK_IMPORTED_MODULE_5__["useCallback"])(function () {\n    var data = {\n      title: title,\n      text: "".concat(title),\n      url: "".concat(window.location.origin, "/posts/").concat(slug, "?shared=true")\n    };\n    Object(_utils__WEBPACK_IMPORTED_MODULE_11__["share"])(data);\n  }, []);\n  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(react__WEBPACK_IMPORTED_MODULE_5___default.a.Fragment, null, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(next_head__WEBPACK_IMPORTED_MODULE_4___default.a, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])("title", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, "".concat(_meta_config__WEBPACK_IMPORTED_MODULE_12__["default"].title, " - ").concat(title)), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])("meta", {\n    property: "og:logo",\n    content: "".concat(_meta_config__WEBPACK_IMPORTED_MODULE_12__["default"].siteUri, "/favicon.ico"),\n    key: "logo",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])("meta", {\n    property: "og:title",\n    content: title,\n    key: "title",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])("meta", {\n    property: "og:image",\n    content: "".concat(_meta_config__WEBPACK_IMPORTED_MODULE_12__["default"].siteUri).concat(cover),\n    key: "image",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])("meta", {\n    property: "og:image:width",\n    content: "1200",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])("meta", {\n    property: "og:image:height",\n    content: "630",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])("meta", {\n    property: "og:type",\n    content: "article",\n    key: "type",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(LayoutContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(NavBar, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])("div", {\n    role: "button",\n    tabIndex: 0,\n    onClick: closePost,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(_mdi_react__WEBPACK_IMPORTED_MODULE_2___default.a, {\n    path: _mdi_js__WEBPACK_IMPORTED_MODULE_1__["mdiClose"],\n    size: "24",\n    color: _styles__WEBPACK_IMPORTED_MODULE_7__["default"].grey300,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(NavIconContainer, {\n    className: "like-button",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(SvgIcon, {\n    role: "button",\n    onClick: toggleLike,\n    src: isLike ? \'/icon/like-on.svg\' : \'/icon/like-off.svg\',\n    className: "like-button",\n    alt: "like",\n    height: "24",\n    width: "24",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(SvgIcon, {\n    role: "button",\n    onClick: shareLink,\n    src: "/icon/share.svg",\n    alt: "share",\n    height: "24",\n    width: "24",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(Article, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(Section, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 11\n    }\n  }, cover && Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(_components_CoverImage__WEBPACK_IMPORTED_MODULE_6__["default"], {\n    src: cover,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 23\n    }\n  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(Tags, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }, tags === null || tags === void 0 ? void 0 : tags.map(function (_ref2) {\n    var slugOfTag = _ref2.slug,\n        name = _ref2.name;\n    return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(Tag, {\n      key: slugOfTag,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }\n    }, name);\n  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])("header", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(Title, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 15\n    }\n  }, title)), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(Contents, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(Markdown, {\n    dangerouslySetInnerHTML: {\n      __html: content\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 15\n    }\n  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(ButtonContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(LikeButton, {\n    onClick: toggleLike,\n    isLike: isLike,\n    className: "like-button",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 15\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(_mdi_react__WEBPACK_IMPORTED_MODULE_2___default.a, {\n    className: "like-button",\n    path: isLike ? _mdi_js__WEBPACK_IMPORTED_MODULE_1__["mdiHeart"] : _mdi_js__WEBPACK_IMPORTED_MODULE_1__["mdiHeartOutline"],\n    color: isLike ? _styles__WEBPACK_IMPORTED_MODULE_7__["default"].grey40 : _styles__WEBPACK_IMPORTED_MODULE_7__["default"].blue300,\n    size: "20",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 17\n    }\n  }), "LIKE"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(ShareButton, {\n    onClick: shareLink,\n    className: "share-button",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 15\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(SvgIcon, {\n    src: "/icon/share.svg",\n    alt: "share",\n    height: "20",\n    width: "20",\n    className: "share-button",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 17\n    }\n  }), "SHARE"))))));\n};\n\n_s(Post, "FqSrkLEWZi5yRrMICIWGwtBl9Xk=", false, function () {\n  return [next_dist_client_router__WEBPACK_IMPORTED_MODULE_3__["useRouter"]];\n});\n\n_c = Post;\nvar __N_SSG = true;\n/* harmony default export */ __webpack_exports__["default"] = (Post);\n\nvar LayoutContainer = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("div", false ? undefined : {\n  target: "ep629fi11",\n  label: "LayoutContainer"\n})(false ? undefined : {\n  name: "bjn8wh",\n  styles: "position:relative",\n  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nvar SvgIcon = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("img", false ? undefined : {\n  target: "ep629fi10",\n  label: "SvgIcon"\n})(false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");\n\nvar Article = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("article", false ? undefined : {\n  target: "ep629fi9",\n  label: "Article"\n})(false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");\n\nvar Section = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("section", false ? undefined : {\n  target: "ep629fi8",\n  label: "Section"\n})(_styles_container_SectionContainer__WEBPACK_IMPORTED_MODULE_8__["default"], ";position:relative;padding-bottom:32px;", function (_ref3) {\n  var theme = _ref3.theme;\n  return theme.media.mobile;\n}, "{margin:0 16px;}" + (false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));\n\nvar Tags = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("div", false ? undefined : {\n  target: "ep629fi7",\n  label: "Tags"\n})(false ? undefined : {\n  name: "1d0nbku",\n  styles: "margin-top:24px",\n  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nvar Tag = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("span", false ? undefined : {\n  target: "ep629fi6",\n  label: "Tag"\n})(_styles_css__WEBPACK_IMPORTED_MODULE_9__["textGrey200"], " font-size:14px;font-weight:bold;line-height:1.57;margin-right:8px;" + (false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));\n\nvar Title = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("h1", false ? undefined : {\n  target: "ep629fi5",\n  label: "Title"\n})(_styles_css__WEBPACK_IMPORTED_MODULE_9__["textBlack"], " margin:8px 0 24px 0;font-size:26px;font-weight:bold;line-height:1.2;" + (false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));\n\nvar Contents = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("div", false ? undefined : {\n  target: "ep629fi4",\n  label: "Contents"\n})(_styles_css__WEBPACK_IMPORTED_MODULE_9__["textGrey300"], " font-size:16px;font-weight:normal;line-height:1.63;min-height:320px;" + (false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));\n\nvar Markdown = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("div", false ? undefined : {\n  target: "ep629fi3",\n  label: "Markdown"\n})(_styles_MarkdownStyle__WEBPACK_IMPORTED_MODULE_10__["default"], ";" + (false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));\n\nvar ButtonContainer = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("div", false ? undefined : {\n  target: "ep629fi2",\n  label: "ButtonContainer"\n})(_styles_css__WEBPACK_IMPORTED_MODULE_9__["flexColumn"], " ", _styles_css__WEBPACK_IMPORTED_MODULE_9__["justifyCenter"], " width:100%;margin-top:48px;button{", _styles_css__WEBPACK_IMPORTED_MODULE_9__["flex"], " ", _styles_css__WEBPACK_IMPORTED_MODULE_9__["alignCenter"], " ", _styles_css__WEBPACK_IMPORTED_MODULE_9__["justifyCenter"], " width:240px;height:48px;border:none;margin:8px auto;border-radius:4px;font-size:16px;font-weight:bold;padding:16px;position:relative;}" + (false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));\n\nvar LikeButton = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("button", false ? undefined : {\n  target: "ep629fi1",\n  label: "LikeButton"\n})(function (_ref4) {\n  var isLike = _ref4.isLike;\n  return isLike ? _styles_css__WEBPACK_IMPORTED_MODULE_9__["backgroundGrey30"] : _styles_css__WEBPACK_IMPORTED_MODULE_9__["backgroundBlue40"];\n}, " ", function (_ref5) {\n  var isLike = _ref5.isLike;\n  return isLike ? _styles_css__WEBPACK_IMPORTED_MODULE_9__["textGrey300"] : _styles_css__WEBPACK_IMPORTED_MODULE_9__["textBlue300"];\n}, " margin-bottom:16px;&>svg{position:absolute;left:16px;}" + (false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9taW5neXVndS9Qcm9qZWN0L2tvb2t1L2tvb2t1LWxvZy9zcmMvcGFnZXMvcG9zdHMvW3NsdWddLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFxUnFEIiwiZmlsZSI6Ii9Vc2Vycy9taW5neXVndS9Qcm9qZWN0L2tvb2t1L2tvb2t1LWxvZy9zcmMvcGFnZXMvcG9zdHMvW3NsdWddLnRzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwcyAqL1xuLyogZXNsaW50LWRpc2FibGUganN4LWExMXkvbm8tc3RhdGljLWVsZW1lbnQtaW50ZXJhY3Rpb25zICovXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBtZGlDbG9zZSwgbWRpSGVhcnQsIG1kaUhlYXJ0T3V0bGluZSB9IGZyb20gJ0BtZGkvanMnO1xuaW1wb3J0IEljb24gZnJvbSAnQG1kaS9yZWFjdCc7XG5pbXBvcnQgeyBHZXRTdGF0aWNQcm9wcyB9IGZyb20gJ25leHQnO1xuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSAnbmV4dC9kaXN0L2NsaWVudC9yb3V0ZXInO1xuaW1wb3J0IEhlYWQgZnJvbSAnbmV4dC9oZWFkJztcbmltcG9ydCB7IFBhcnNlZFVybFF1ZXJ5IH0gZnJvbSAncXVlcnlzdHJpbmcnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgQ292ZXJJbWFnZSBmcm9tICdAL2NvbXBvbmVudHMvQ292ZXJJbWFnZSc7XG5pbXBvcnQgbWFya2Rvd25Ub0h0bWwgZnJvbSAnQC9saWIvbWFya2Rvd25Ub0h0bWwnO1xuaW1wb3J0IHsgZ2V0UG9zdEJ5U2x1ZywgbGlzdFBvc3RDb250ZW50LCBQb3N0Q29udGVudCB9IGZyb20gJ0AvbGliL3Bvc3RzJztcbmltcG9ydCBjb2xvciBmcm9tICdAL3N0eWxlcyc7XG5pbXBvcnQgU2VjdGlvbkNvbnRhaW5lciBmcm9tICdAL3N0eWxlcy9jb250YWluZXIvU2VjdGlvbkNvbnRhaW5lcic7XG5pbXBvcnQge1xuICBhbGlnbkNlbnRlcixcbiAgYmFja2dyb3VuZEJsdWU0MCxcbiAgYmFja2dyb3VuZEdyZXkzMCxcbiAgZmxleCxcbiAgZmxleENvbHVtbixcbiAganVzdGlmeUNlbnRlcixcbiAgdGV4dEJsYWNrLFxuICB0ZXh0Qmx1ZTMwMCxcbiAgdGV4dEdyZXkyMDAsXG4gIHRleHRHcmV5MzAwXG59IGZyb20gJ0Avc3R5bGVzL2Nzcyc7XG5pbXBvcnQgTWFya2Rvd25TdHlsZSBmcm9tICdAL3N0eWxlcy9NYXJrZG93blN0eWxlJztcbmltcG9ydCB7IHNoYXJlIH0gZnJvbSAnQC91dGlscyc7XG5pbXBvcnQgbWV0YUNvbmZpZyBmcm9tICd+L21ldGEtY29uZmlnJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgcG9zdDogUG9zdENvbnRlbnQgJiB7XG4gICAgcmVhZG9ubHkgY29udGVudDogc3RyaW5nO1xuICB9O1xufVxuXG5pbnRlcmZhY2UgUGFyYW1zIGV4dGVuZHMgUGFyc2VkVXJsUXVlcnkge1xuICBzbHVnOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjb25zdCBnZXRTdGF0aWNQcm9wczogR2V0U3RhdGljUHJvcHM8UHJvcHMsIFBhcmFtcz4gPSBhc3luYyAoY29udGV4dCkgPT4ge1xuICBjb25zdCBwYXJhbXMgPSBjb250ZXh0LnBhcmFtcyE7XG4gIGNvbnN0IHBvc3QgPSBnZXRQb3N0QnlTbHVnKHBhcmFtcy5zbHVnLCBbJ3RpdGxlJywgJ3NsdWcnLCAnY29udGVudCcsICdjb3ZlcicsICd0YWdzJ10pO1xuICBjb25zdCBjb250ZW50ID0gYXdhaXQgbWFya2Rvd25Ub0h0bWwocG9zdC5jb250ZW50IHx8ICcnKTtcblxuICByZXR1cm4ge1xuICAgIHByb3BzOiB7XG4gICAgICBwb3N0OiB7XG4gICAgICAgIC4uLnBvc3QsXG4gICAgICAgIGNvbnRlbnRcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0U3RhdGljUGF0aHMgPSAoKSA9PiB7XG4gIGNvbnN0IHBvc3RzID0gbGlzdFBvc3RDb250ZW50KCk7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRoczogcG9zdHM/Lm1hcCgocG9zdCkgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgc2x1ZzogcG9zdC5zbHVnXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSksXG4gICAgZmFsbGJhY2s6IGZhbHNlXG4gIH07XG59O1xuXG5jb25zdCBQb3N0OiBSZWFjdC5GQzxQcm9wcz4gPSAoeyBwb3N0IH0pID0+IHtcbiAgY29uc3QgeyBjb250ZW50LCBjb3Zlciwgc2x1ZywgdGl0bGUsIHRhZ3MgfSA9IHBvc3Q7XG4gIGNvbnN0IFtpc0xpa2UsIHNldElzTGlrZV0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbGlrZXM6IHN0cmluZ1tdID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbGlrZXMnKSA/PyAnW10nKTtcbiAgICAgIGlmIChsaWtlcy5pbmRleE9mKHNsdWcpICE9PSAtMSkge1xuICAgICAgICBzZXRJc0xpa2UodHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRJc0xpa2UoZmFsc2UpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICB9XG4gIH0sIFtdKTtcblxuICBjb25zdCB0b2dnbGVMaWtlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBsaWtlczogc3RyaW5nW10gPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdsaWtlcycpID8/ICdbXScpO1xuICAgICAgaWYgKGlzTGlrZSkge1xuICAgICAgICBsaWtlcy5zcGxpY2UobGlrZXMuaW5kZXhPZihzbHVnKSwgMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaWtlcy5wdXNoKHNsdWcpO1xuICAgICAgfVxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2xpa2VzJywgSlNPTi5zdHJpbmdpZnkobGlrZXMpKTtcbiAgICAgIHNldElzTGlrZSghaXNMaWtlKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgfVxuICB9LCBbaXNMaWtlXSk7XG5cbiAgY29uc3QgY2xvc2VQb3N0ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHJvdXRlci5yZXBsYWNlKCcvJyk7XG4gIH0sIFtdKTtcblxuICBjb25zdCBzaGFyZUxpbmsgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIHRpdGxlLFxuICAgICAgdGV4dDogYCR7dGl0bGV9YCxcbiAgICAgIHVybDogYCR7d2luZG93LmxvY2F0aW9uLm9yaWdpbn0vcG9zdHMvJHtzbHVnfT9zaGFyZWQ9dHJ1ZWBcbiAgICB9O1xuXG4gICAgc2hhcmUoZGF0YSk7XG4gIH0sIFtdKTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8SGVhZD5cbiAgICAgICAgPHRpdGxlPntgJHttZXRhQ29uZmlnLnRpdGxlfSAtICR7dGl0bGV9YH08L3RpdGxlPlxuICAgICAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOmxvZ29cIiBjb250ZW50PXtgJHttZXRhQ29uZmlnLnNpdGVVcml9L2Zhdmljb24uaWNvYH0ga2V5PVwibG9nb1wiIC8+XG4gICAgICAgIDxtZXRhIHByb3BlcnR5PVwib2c6dGl0bGVcIiBjb250ZW50PXt0aXRsZX0ga2V5PVwidGl0bGVcIiAvPlxuICAgICAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOmltYWdlXCIgY29udGVudD17YCR7bWV0YUNvbmZpZy5zaXRlVXJpfSR7Y292ZXJ9YH0ga2V5PVwiaW1hZ2VcIiAvPlxuICAgICAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOmltYWdlOndpZHRoXCIgY29udGVudD1cIjEyMDBcIiAvPlxuICAgICAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOmltYWdlOmhlaWdodFwiIGNvbnRlbnQ9XCI2MzBcIiAvPlxuICAgICAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOnR5cGVcIiBjb250ZW50PVwiYXJ0aWNsZVwiIGtleT1cInR5cGVcIiAvPlxuICAgICAgPC9IZWFkPlxuICAgICAgPExheW91dENvbnRhaW5lcj5cbiAgICAgICAgPE5hdkJhcj5cbiAgICAgICAgICA8ZGl2IHJvbGU9XCJidXR0b25cIiB0YWJJbmRleD17MH0gb25DbGljaz17Y2xvc2VQb3N0fT5cbiAgICAgICAgICAgIDxJY29uIHBhdGg9e21kaUNsb3NlfSBzaXplPVwiMjRcIiBjb2xvcj17Y29sb3IuZ3JleTMwMH0gLz5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxOYXZJY29uQ29udGFpbmVyIGNsYXNzTmFtZT1cImxpa2UtYnV0dG9uXCI+XG4gICAgICAgICAgICA8U3ZnSWNvblxuICAgICAgICAgICAgICByb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgb25DbGljaz17dG9nZ2xlTGlrZX1cbiAgICAgICAgICAgICAgc3JjPXtpc0xpa2UgPyAnL2ljb24vbGlrZS1vbi5zdmcnIDogJy9pY29uL2xpa2Utb2ZmLnN2Zyd9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImxpa2UtYnV0dG9uXCJcbiAgICAgICAgICAgICAgYWx0PVwibGlrZVwiXG4gICAgICAgICAgICAgIGhlaWdodD1cIjI0XCJcbiAgICAgICAgICAgICAgd2lkdGg9XCIyNFwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPFN2Z0ljb25cbiAgICAgICAgICAgICAgcm9sZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3NoYXJlTGlua31cbiAgICAgICAgICAgICAgc3JjPVwiL2ljb24vc2hhcmUuc3ZnXCJcbiAgICAgICAgICAgICAgYWx0PVwic2hhcmVcIlxuICAgICAgICAgICAgICBoZWlnaHQ9XCIyNFwiXG4gICAgICAgICAgICAgIHdpZHRoPVwiMjRcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L05hdkljb25Db250YWluZXI+XG4gICAgICAgIDwvTmF2QmFyPlxuXG4gICAgICAgIDxBcnRpY2xlPlxuICAgICAgICAgIDxTZWN0aW9uPlxuICAgICAgICAgICAge2NvdmVyICYmIDxDb3ZlckltYWdlIHNyYz17Y292ZXJ9IC8+fVxuICAgICAgICAgICAgPFRhZ3M+XG4gICAgICAgICAgICAgIHt0YWdzPy5tYXAoKHsgc2x1Zzogc2x1Z09mVGFnLCBuYW1lIH0pID0+IChcbiAgICAgICAgICAgICAgICA8VGFnIGtleT17c2x1Z09mVGFnfT57bmFtZX08L1RhZz5cbiAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L1RhZ3M+XG4gICAgICAgICAgICA8aGVhZGVyPlxuICAgICAgICAgICAgICA8VGl0bGU+e3RpdGxlfTwvVGl0bGU+XG4gICAgICAgICAgICA8L2hlYWRlcj5cblxuICAgICAgICAgICAgPENvbnRlbnRzPlxuICAgICAgICAgICAgICA8TWFya2Rvd24gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiBjb250ZW50IH19IC8+XG4gICAgICAgICAgICA8L0NvbnRlbnRzPlxuXG4gICAgICAgICAgICA8QnV0dG9uQ29udGFpbmVyPlxuICAgICAgICAgICAgICA8TGlrZUJ1dHRvbiBvbkNsaWNrPXt0b2dnbGVMaWtlfSBpc0xpa2U9e2lzTGlrZX0gY2xhc3NOYW1lPVwibGlrZS1idXR0b25cIj5cbiAgICAgICAgICAgICAgICA8SWNvblxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibGlrZS1idXR0b25cIlxuICAgICAgICAgICAgICAgICAgcGF0aD17aXNMaWtlID8gbWRpSGVhcnQgOiBtZGlIZWFydE91dGxpbmV9XG4gICAgICAgICAgICAgICAgICBjb2xvcj17aXNMaWtlID8gY29sb3IuZ3JleTQwIDogY29sb3IuYmx1ZTMwMH1cbiAgICAgICAgICAgICAgICAgIHNpemU9XCIyMFwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICBMSUtFXG4gICAgICAgICAgICAgIDwvTGlrZUJ1dHRvbj5cblxuICAgICAgICAgICAgICA8U2hhcmVCdXR0b24gb25DbGljaz17c2hhcmVMaW5rfSBjbGFzc05hbWU9XCJzaGFyZS1idXR0b25cIj5cbiAgICAgICAgICAgICAgICA8U3ZnSWNvblxuICAgICAgICAgICAgICAgICAgc3JjPVwiL2ljb24vc2hhcmUuc3ZnXCJcbiAgICAgICAgICAgICAgICAgIGFsdD1cInNoYXJlXCJcbiAgICAgICAgICAgICAgICAgIGhlaWdodD1cIjIwXCJcbiAgICAgICAgICAgICAgICAgIHdpZHRoPVwiMjBcIlxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2hhcmUtYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIFNIQVJFXG4gICAgICAgICAgICAgIDwvU2hhcmVCdXR0b24+XG4gICAgICAgICAgICA8L0J1dHRvbkNvbnRhaW5lcj5cbiAgICAgICAgICA8L1NlY3Rpb24+XG4gICAgICAgIDwvQXJ0aWNsZT5cbiAgICAgIDwvTGF5b3V0Q29udGFpbmVyPlxuICAgIDwvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUG9zdDtcblxuY29uc3QgTGF5b3V0Q29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuYDtcblxuY29uc3QgU3ZnSWNvbiA9IHN0eWxlZC5pbWdgYDtcblxuY29uc3QgQXJ0aWNsZSA9IHN0eWxlZC5hcnRpY2xlYGA7XG5cbmNvbnN0IFNlY3Rpb24gPSBzdHlsZWQuc2VjdGlvbmBcbiAgJHtTZWN0aW9uQ29udGFpbmVyfTtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBwYWRkaW5nLWJvdHRvbTogMzJweDtcblxuICAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLm1lZGlhLm1vYmlsZX0ge1xuICAgIG1hcmdpbjogMCAxNnB4O1xuICB9XG5gO1xuXG5jb25zdCBUYWdzID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luLXRvcDogMjRweDtcbmA7XG5cbmNvbnN0IFRhZyA9IHN0eWxlZC5zcGFuYFxuICAke3RleHRHcmV5MjAwfVxuICBmb250LXNpemU6IDE0cHg7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICBsaW5lLWhlaWdodDogMS41NztcbiAgbWFyZ2luLXJpZ2h0OiA4cHg7XG5gO1xuXG5jb25zdCBUaXRsZSA9IHN0eWxlZC5oMWBcbiAgJHt0ZXh0QmxhY2t9XG4gIG1hcmdpbjogOHB4IDAgMjRweCAwO1xuICBmb250LXNpemU6IDI2cHg7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICBsaW5lLWhlaWdodDogMS4yO1xuYDtcblxuY29uc3QgQ29udGVudHMgPSBzdHlsZWQuZGl2YFxuICAke3RleHRHcmV5MzAwfVxuICBmb250LXNpemU6IDE2cHg7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGxpbmUtaGVpZ2h0OiAxLjYzO1xuICBtaW4taGVpZ2h0OiAzMjBweDtcbmA7XG5cbmNvbnN0IE1hcmtkb3duID0gc3R5bGVkLmRpdmBcbiAgJHtNYXJrZG93blN0eWxlfTtcbmA7XG5cbmNvbnN0IEJ1dHRvbkNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gICR7ZmxleENvbHVtbn1cbiAgJHtqdXN0aWZ5Q2VudGVyfVxuICB3aWR0aDogMTAwJTtcbiAgbWFyZ2luLXRvcDogNDhweDtcblxuICBidXR0b24ge1xuICAgICR7ZmxleH1cbiAgICAke2FsaWduQ2VudGVyfVxuICAgICR7anVzdGlmeUNlbnRlcn1cbiAgICB3aWR0aDogMjQwcHg7XG4gICAgaGVpZ2h0OiA0OHB4O1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICBtYXJnaW46IDhweCBhdXRvO1xuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICBmb250LXNpemU6IDE2cHg7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgcGFkZGluZzogMTZweDtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIH1cbmA7XG5cbmNvbnN0IExpa2VCdXR0b24gPSBzdHlsZWQuYnV0dG9uPHsgaXNMaWtlOiBib29sZWFuIH0+YFxuICAkeyh7IGlzTGlrZSB9KSA9PiAoaXNMaWtlID8gYmFja2dyb3VuZEdyZXkzMCA6IGJhY2tncm91bmRCbHVlNDApfVxuICAkeyh7IGlzTGlrZSB9KSA9PiAoaXNMaWtlID8gdGV4dEdyZXkzMDAgOiB0ZXh0Qmx1ZTMwMCl9XG4gIG1hcmdpbi1ib3R0b206IDE2cHg7XG5cbiAgJiA+IHN2ZyB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGxlZnQ6IDE2cHg7XG4gIH1cbmA7XG5cbmNvbnN0IFNoYXJlQnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgJHtiYWNrZ3JvdW5kR3JleTMwfVxuICAke3RleHRHcmV5MzAwfVxuICAmID4gaW1nIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgbGVmdDogMTZweDtcbiAgfVxuYDtcbiJdfQ== */"));\n\nvar ShareButton = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("button", false ? undefined : {\n  target: "ep629fi0",\n  label: "ShareButton"\n})(_styles_css__WEBPACK_IMPORTED_MODULE_9__["backgroundGrey30"], " ", _styles_css__WEBPACK_IMPORTED_MODULE_9__["textGrey300"], " &>img{position:absolute;left:16px;}" + (false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));\n\nvar _c;\n\n$RefreshReg$(_c, "Post");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we\'re in a\n    // browser context before continuing.\n    if (typeof self !== \'undefined\' &&\n        // AMP / No-JS mode does not inject these helpers:\n        \'$RefreshHelpers$\' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we\'ll check if it\'s\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we\'ll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it\'s possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/next/dist/compiled/webpack/harmony-module.js */ "./node_modules/next/dist/compiled/webpack/harmony-module.js")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/pages/posts/[slug].tsx\n'
      );

      /***/
    }
});
