webpackHotUpdate_N_E('pages/posts/[slug]', {
  /***/ './src/components/Navigation/index.tsx':
    /*!*********************************************!*\
  !*** ./src/components/Navigation/index.tsx ***!
  \*********************************************/
    /*! exports provided: default */
    /***/ function (module, __webpack_exports__, __webpack_require__) {
      'use strict';
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled/base */ "./node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js");\n/* harmony import */ var next_dist_client_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/client/router */ "./node_modules/next/dist/client/router.js");\n/* harmony import */ var next_dist_client_router__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_dist_client_router__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _styles_components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/styles/components */ "./src/styles/components/index.ts");\n/* harmony import */ var _styles_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/styles/css */ "./src/styles/css/index.ts");\n/* harmony import */ var _meta_config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ~/meta-config */ "./meta-config.ts");\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @emotion/react */ "./node_modules/@emotion/react/dist/emotion-react.browser.esm.js");\n\n\nvar _jsxFileName = "/Users/mingyugu/Project/kooku/kooku-log/src/components/Navigation/index.tsx",\n    _this = undefined,\n    _s = $RefreshSig$();\n\n\n\n\n\n\n\n\nvar Navigation = function Navigation(_ref) {\n  _s();\n\n  var sharePost = _ref.sharePost;\n  var router = Object(next_dist_client_router__WEBPACK_IMPORTED_MODULE_1__["useRouter"])();\n\n  var moveToHome = function moveToHome() {\n    router.push(\'/\');\n  };\n\n  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])(NavBar, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])("div", {\n    role: "button",\n    tabIndex: 0,\n    onClick: moveToHome,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, _meta_config__WEBPACK_IMPORTED_MODULE_5__["default"].title), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])(SvgIcon, {\n    role: "button",\n    onClick: sharePost,\n    src: "/icon/share.svg",\n    alt: "share",\n    height: "24",\n    width: "24",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(Navigation, "fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=", false, function () {\n  return [next_dist_client_router__WEBPACK_IMPORTED_MODULE_1__["useRouter"]];\n});\n\n_c = Navigation;\n/* harmony default export */ __webpack_exports__["default"] = (Navigation);\n\nvar NavBar = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("nav", false ? undefined : {\n  target: "e1ohtyx51",\n  label: "NavBar"\n})(_styles_css__WEBPACK_IMPORTED_MODULE_4__["flex"], " ", _styles_css__WEBPACK_IMPORTED_MODULE_4__["justifySpaceBetween"], " ", _styles_css__WEBPACK_IMPORTED_MODULE_4__["alignCenter"], " ", _styles_components__WEBPACK_IMPORTED_MODULE_3__["SectionContainer"], " ", _styles_css__WEBPACK_IMPORTED_MODULE_4__["backgroundWhite"], " position:sticky;left:0;right:0;top:0;padding-left:16px;padding-right:16px;z-index:999;height:48px;", function (_ref2) {\n  var theme = _ref2.theme;\n  return theme.media.desktop;\n}, "{display:none;}" + (false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9taW5neXVndS9Qcm9qZWN0L2tvb2t1L2tvb2t1LWxvZy9zcmMvY29tcG9uZW50cy9OYXZpZ2F0aW9uL2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF1Q3lCIiwiZmlsZSI6Ii9Vc2Vycy9taW5neXVndS9Qcm9qZWN0L2tvb2t1L2tvb2t1LWxvZy9zcmMvY29tcG9uZW50cy9OYXZpZ2F0aW9uL2luZGV4LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gJ25leHQvZGlzdC9jbGllbnQvcm91dGVyJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IFNlY3Rpb25Db250YWluZXIgfSBmcm9tICdAL3N0eWxlcy9jb21wb25lbnRzJztcbmltcG9ydCB7IGFsaWduQ2VudGVyLCBiYWNrZ3JvdW5kV2hpdGUsIGZsZXgsIGp1c3RpZnlTcGFjZUJldHdlZW4gfSBmcm9tICdAL3N0eWxlcy9jc3MnO1xuaW1wb3J0IG1ldGFDb25maWcgZnJvbSAnfi9tZXRhLWNvbmZpZyc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNoYXJlUG9zdDogKCkgPT4gdm9pZDtcbn1cblxuY29uc3QgTmF2aWdhdGlvbjogUmVhY3QuRkM8UHJvcHM+ID0gKHsgc2hhcmVQb3N0IH0pID0+IHtcbiAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7XG5cbiAgY29uc3QgbW92ZVRvSG9tZSA9ICgpID0+IHtcbiAgICByb3V0ZXIucHVzaCgnLycpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPE5hdkJhcj5cbiAgICAgIDxkaXYgcm9sZT1cImJ1dHRvblwiIHRhYkluZGV4PXswfSBvbkNsaWNrPXttb3ZlVG9Ib21lfT5cbiAgICAgICAge21ldGFDb25maWcudGl0bGV9XG4gICAgICA8L2Rpdj5cblxuICAgICAgPFN2Z0ljb25cbiAgICAgICAgcm9sZT1cImJ1dHRvblwiXG4gICAgICAgIG9uQ2xpY2s9e3NoYXJlUG9zdH1cbiAgICAgICAgc3JjPVwiL2ljb24vc2hhcmUuc3ZnXCJcbiAgICAgICAgYWx0PVwic2hhcmVcIlxuICAgICAgICBoZWlnaHQ9XCIyNFwiXG4gICAgICAgIHdpZHRoPVwiMjRcIlxuICAgICAgLz5cbiAgICA8L05hdkJhcj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE5hdmlnYXRpb247XG5cbmNvbnN0IE5hdkJhciA9IHN0eWxlZC5uYXZgXG4gICR7ZmxleH1cbiAgJHtqdXN0aWZ5U3BhY2VCZXR3ZWVufVxuICAke2FsaWduQ2VudGVyfVxuICAke1NlY3Rpb25Db250YWluZXJ9XG4gICR7YmFja2dyb3VuZFdoaXRlfVxuICBwb3NpdGlvbjogc3RpY2t5O1xuICBsZWZ0OiAwO1xuICByaWdodDogMDtcbiAgdG9wOiAwO1xuICBwYWRkaW5nLWxlZnQ6IDE2cHg7XG4gIHBhZGRpbmctcmlnaHQ6IDE2cHg7XG4gIHotaW5kZXg6IDk5OTtcbiAgaGVpZ2h0OiA0OHB4O1xuXG4gICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUubWVkaWEuZGVza3RvcH0ge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cbmA7XG5cbmNvbnN0IFN2Z0ljb24gPSBzdHlsZWQuaW1nYGA7XG4iXX0= */"));\n\nvar SvgIcon = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("img", false ? undefined : {\n  target: "e1ohtyx50",\n  label: "SvgIcon"\n})(false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9taW5neXVndS9Qcm9qZWN0L2tvb2t1L2tvb2t1LWxvZy9zcmMvY29tcG9uZW50cy9OYXZpZ2F0aW9uL2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEyRDBCIiwiZmlsZSI6Ii9Vc2Vycy9taW5neXVndS9Qcm9qZWN0L2tvb2t1L2tvb2t1LWxvZy9zcmMvY29tcG9uZW50cy9OYXZpZ2F0aW9uL2luZGV4LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gJ25leHQvZGlzdC9jbGllbnQvcm91dGVyJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IFNlY3Rpb25Db250YWluZXIgfSBmcm9tICdAL3N0eWxlcy9jb21wb25lbnRzJztcbmltcG9ydCB7IGFsaWduQ2VudGVyLCBiYWNrZ3JvdW5kV2hpdGUsIGZsZXgsIGp1c3RpZnlTcGFjZUJldHdlZW4gfSBmcm9tICdAL3N0eWxlcy9jc3MnO1xuaW1wb3J0IG1ldGFDb25maWcgZnJvbSAnfi9tZXRhLWNvbmZpZyc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNoYXJlUG9zdDogKCkgPT4gdm9pZDtcbn1cblxuY29uc3QgTmF2aWdhdGlvbjogUmVhY3QuRkM8UHJvcHM+ID0gKHsgc2hhcmVQb3N0IH0pID0+IHtcbiAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7XG5cbiAgY29uc3QgbW92ZVRvSG9tZSA9ICgpID0+IHtcbiAgICByb3V0ZXIucHVzaCgnLycpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPE5hdkJhcj5cbiAgICAgIDxkaXYgcm9sZT1cImJ1dHRvblwiIHRhYkluZGV4PXswfSBvbkNsaWNrPXttb3ZlVG9Ib21lfT5cbiAgICAgICAge21ldGFDb25maWcudGl0bGV9XG4gICAgICA8L2Rpdj5cblxuICAgICAgPFN2Z0ljb25cbiAgICAgICAgcm9sZT1cImJ1dHRvblwiXG4gICAgICAgIG9uQ2xpY2s9e3NoYXJlUG9zdH1cbiAgICAgICAgc3JjPVwiL2ljb24vc2hhcmUuc3ZnXCJcbiAgICAgICAgYWx0PVwic2hhcmVcIlxuICAgICAgICBoZWlnaHQ9XCIyNFwiXG4gICAgICAgIHdpZHRoPVwiMjRcIlxuICAgICAgLz5cbiAgICA8L05hdkJhcj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE5hdmlnYXRpb247XG5cbmNvbnN0IE5hdkJhciA9IHN0eWxlZC5uYXZgXG4gICR7ZmxleH1cbiAgJHtqdXN0aWZ5U3BhY2VCZXR3ZWVufVxuICAke2FsaWduQ2VudGVyfVxuICAke1NlY3Rpb25Db250YWluZXJ9XG4gICR7YmFja2dyb3VuZFdoaXRlfVxuICBwb3NpdGlvbjogc3RpY2t5O1xuICBsZWZ0OiAwO1xuICByaWdodDogMDtcbiAgdG9wOiAwO1xuICBwYWRkaW5nLWxlZnQ6IDE2cHg7XG4gIHBhZGRpbmctcmlnaHQ6IDE2cHg7XG4gIHotaW5kZXg6IDk5OTtcbiAgaGVpZ2h0OiA0OHB4O1xuXG4gICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUubWVkaWEuZGVza3RvcH0ge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cbmA7XG5cbmNvbnN0IFN2Z0ljb24gPSBzdHlsZWQuaW1nYGA7XG4iXX0= */");\n\nvar _c;\n\n$RefreshReg$(_c, "Navigation");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we\'re in a\n    // browser context before continuing.\n    if (typeof self !== \'undefined\' &&\n        // AMP / No-JS mode does not inject these helpers:\n        \'$RefreshHelpers$\' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we\'ll check if it\'s\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we\'ll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it\'s possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/next/dist/compiled/webpack/harmony-module.js */ "./node_modules/next/dist/compiled/webpack/harmony-module.js")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbXBvbmVudHMvTmF2aWdhdGlvbi9pbmRleC50c3g/MjAyZSJdLCJuYW1lcyI6WyJOYXZpZ2F0aW9uIiwic2hhcmVQb3N0Iiwicm91dGVyIiwidXNlUm91dGVyIiwibW92ZVRvSG9tZSIsInB1c2giLCJtZXRhQ29uZmlnIiwidGl0bGUiLCJOYXZCYXIiLCJmbGV4IiwianVzdGlmeVNwYWNlQmV0d2VlbiIsImFsaWduQ2VudGVyIiwiU2VjdGlvbkNvbnRhaW5lciIsImJhY2tncm91bmRXaGl0ZSIsInRoZW1lIiwibWVkaWEiLCJkZXNrdG9wIiwiU3ZnSWNvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQU1BLElBQU1BLFVBQTJCLEdBQUcsU0FBOUJBLFVBQThCLE9BQW1CO0FBQUE7O0FBQUEsTUFBaEJDLFNBQWdCLFFBQWhCQSxTQUFnQjtBQUNyRCxNQUFNQyxNQUFNLEdBQUdDLHlFQUFTLEVBQXhCOztBQUVBLE1BQU1DLFVBQVUsR0FBRyxTQUFiQSxVQUFhLEdBQU07QUFDdkJGLFVBQU0sQ0FBQ0csSUFBUCxDQUFZLEdBQVo7QUFDRCxHQUZEOztBQUlBLFNBQ0UsMkRBQUMsTUFBRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQ0U7QUFBSyxRQUFJLEVBQUMsUUFBVjtBQUFtQixZQUFRLEVBQUUsQ0FBN0I7QUFBZ0MsV0FBTyxFQUFFRCxVQUF6QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQ0dFLG9EQUFVLENBQUNDLEtBRGQsQ0FERixFQUtFLDJEQUFDLE9BQUQ7QUFDRSxRQUFJLEVBQUMsUUFEUDtBQUVFLFdBQU8sRUFBRU4sU0FGWDtBQUdFLE9BQUcsRUFBQyxpQkFITjtBQUlFLE9BQUcsRUFBQyxPQUpOO0FBS0UsVUFBTSxFQUFDLElBTFQ7QUFNRSxTQUFLLEVBQUMsSUFOUjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBTEYsQ0FERjtBQWdCRCxDQXZCRDs7R0FBTUQsVTtVQUNXRyxpRTs7O0tBRFhILFU7QUF5QlNBLHlFQUFmOztBQUVBLElBQU1RLE1BQU0sR0FBRyw2RkFBSDtBQUFBO0FBQUE7QUFBQSxHQUNSQyxnREFEUSxPQUVSQywrREFGUSxPQUdSQyx1REFIUSxPQUlSQyxtRUFKUSxPQUtSQywyREFMUSx5R0FlUjtBQUFBLE1BQUdDLEtBQUgsU0FBR0EsS0FBSDtBQUFBLFNBQWVBLEtBQUssQ0FBQ0MsS0FBTixDQUFZQyxPQUEzQjtBQUFBLENBZlEsa2tFQUFaOztBQW9CQSxJQUFNQyxPQUFPLEdBQUcsNkZBQUg7QUFBQTtBQUFBO0FBQUEsNmlFQUFiIiwiZmlsZSI6Ii4vc3JjL2NvbXBvbmVudHMvTmF2aWdhdGlvbi9pbmRleC50c3guanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tICduZXh0L2Rpc3QvY2xpZW50L3JvdXRlcic7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBTZWN0aW9uQ29udGFpbmVyIH0gZnJvbSAnQC9zdHlsZXMvY29tcG9uZW50cyc7XG5pbXBvcnQgeyBhbGlnbkNlbnRlciwgYmFja2dyb3VuZFdoaXRlLCBmbGV4LCBqdXN0aWZ5U3BhY2VCZXR3ZWVuIH0gZnJvbSAnQC9zdHlsZXMvY3NzJztcbmltcG9ydCBtZXRhQ29uZmlnIGZyb20gJ34vbWV0YS1jb25maWcnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzaGFyZVBvc3Q6ICgpID0+IHZvaWQ7XG59XG5cbmNvbnN0IE5hdmlnYXRpb246IFJlYWN0LkZDPFByb3BzPiA9ICh7IHNoYXJlUG9zdCB9KSA9PiB7XG4gIGNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpO1xuXG4gIGNvbnN0IG1vdmVUb0hvbWUgPSAoKSA9PiB7XG4gICAgcm91dGVyLnB1c2goJy8nKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxOYXZCYXI+XG4gICAgICA8ZGl2IHJvbGU9XCJidXR0b25cIiB0YWJJbmRleD17MH0gb25DbGljaz17bW92ZVRvSG9tZX0+XG4gICAgICAgIHttZXRhQ29uZmlnLnRpdGxlfVxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxTdmdJY29uXG4gICAgICAgIHJvbGU9XCJidXR0b25cIlxuICAgICAgICBvbkNsaWNrPXtzaGFyZVBvc3R9XG4gICAgICAgIHNyYz1cIi9pY29uL3NoYXJlLnN2Z1wiXG4gICAgICAgIGFsdD1cInNoYXJlXCJcbiAgICAgICAgaGVpZ2h0PVwiMjRcIlxuICAgICAgICB3aWR0aD1cIjI0XCJcbiAgICAgIC8+XG4gICAgPC9OYXZCYXI+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBOYXZpZ2F0aW9uO1xuXG5jb25zdCBOYXZCYXIgPSBzdHlsZWQubmF2YFxuICAke2ZsZXh9XG4gICR7anVzdGlmeVNwYWNlQmV0d2Vlbn1cbiAgJHthbGlnbkNlbnRlcn1cbiAgJHtTZWN0aW9uQ29udGFpbmVyfVxuICAke2JhY2tncm91bmRXaGl0ZX1cbiAgcG9zaXRpb246IHN0aWNreTtcbiAgbGVmdDogMDtcbiAgcmlnaHQ6IDA7XG4gIHRvcDogMDtcbiAgcGFkZGluZy1sZWZ0OiAxNnB4O1xuICBwYWRkaW5nLXJpZ2h0OiAxNnB4O1xuICB6LWluZGV4OiA5OTk7XG4gIGhlaWdodDogNDhweDtcblxuICAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLm1lZGlhLmRlc2t0b3B9IHtcbiAgICBkaXNwbGF5OiBub25lO1xuICB9XG5gO1xuXG5jb25zdCBTdmdJY29uID0gc3R5bGVkLmltZ2BgO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/Navigation/index.tsx\n'
      );

      /***/
    },

  /***/ './src/pages/posts/[slug].tsx':
    /*!************************************!*\
  !*** ./src/pages/posts/[slug].tsx ***!
  \************************************/
    /*! exports provided: __N_SSG, default */
    /***/ function (module, __webpack_exports__, __webpack_require__) {
      'use strict';
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__N_SSG", function() { return __N_SSG; });\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled/base */ "./node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js");\n/* harmony import */ var _mdi_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @mdi/js */ "./node_modules/@mdi/js/mdi.js");\n/* harmony import */ var _mdi_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @mdi/react */ "./node_modules/@mdi/react/Icon.js");\n/* harmony import */ var _mdi_react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_mdi_react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_client_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/client/router */ "./node_modules/next/dist/client/router.js");\n/* harmony import */ var next_dist_client_router__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_client_router__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/head */ "./node_modules/next/head.js");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _components_CoverImage__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/components/CoverImage */ "./src/components/CoverImage/index.tsx");\n/* harmony import */ var _components_Navigation__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/components/Navigation */ "./src/components/Navigation/index.tsx");\n/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @/styles */ "./src/styles/index.ts");\n/* harmony import */ var _styles_container_SectionContainer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @/styles/container/SectionContainer */ "./src/styles/container/SectionContainer.ts");\n/* harmony import */ var _styles_css__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @/styles/css */ "./src/styles/css/index.ts");\n/* harmony import */ var _styles_MarkdownStyle__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @/styles/MarkdownStyle */ "./src/styles/MarkdownStyle.ts");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @/utils */ "./src/utils/index.ts");\n/* harmony import */ var _meta_config__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ~/meta-config */ "./meta-config.ts");\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @emotion/react */ "./node_modules/@emotion/react/dist/emotion-react.browser.esm.js");\n\n\nvar _jsxFileName = "/Users/mingyugu/Project/kooku/kooku-log/src/pages/posts/[slug].tsx",\n    _this = undefined,\n    _s = $RefreshSig$();\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn\'t supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar Post = function Post(_ref) {\n  _s();\n\n  var post = _ref.post;\n  var content = post.content,\n      cover = post.cover,\n      slug = post.slug,\n      title = post.title,\n      tags = post.tags;\n\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_5__["useState"])(false),\n      isLike = _useState[0],\n      setIsLike = _useState[1];\n\n  var router = Object(next_dist_client_router__WEBPACK_IMPORTED_MODULE_3__["useRouter"])();\n  Object(react__WEBPACK_IMPORTED_MODULE_5__["useEffect"])(function () {\n    try {\n      var _localStorage$getItem;\n\n      var likes = JSON.parse((_localStorage$getItem = localStorage.getItem(\'likes\')) !== null && _localStorage$getItem !== void 0 ? _localStorage$getItem : \'[]\');\n\n      if (likes.indexOf(slug) !== -1) {\n        setIsLike(true);\n      } else {\n        setIsLike(false);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }, []);\n  var toggleLike = Object(react__WEBPACK_IMPORTED_MODULE_5__["useCallback"])(function () {\n    try {\n      var _localStorage$getItem2;\n\n      var likes = JSON.parse((_localStorage$getItem2 = localStorage.getItem(\'likes\')) !== null && _localStorage$getItem2 !== void 0 ? _localStorage$getItem2 : \'[]\');\n\n      if (isLike) {\n        likes.splice(likes.indexOf(slug), 1);\n      } else {\n        likes.push(slug);\n      }\n\n      localStorage.setItem(\'likes\', JSON.stringify(likes));\n      setIsLike(!isLike);\n    } catch (error) {\n      console.error(error);\n    }\n  }, [isLike]);\n  var closePost = Object(react__WEBPACK_IMPORTED_MODULE_5__["useCallback"])(function () {\n    router.replace(\'/\');\n  }, []);\n  var shareLink = Object(react__WEBPACK_IMPORTED_MODULE_5__["useCallback"])(function () {\n    var data = {\n      title: title,\n      text: "".concat(title),\n      url: "".concat(window.location.origin, "/posts/").concat(slug, "?shared=true")\n    };\n    Object(_utils__WEBPACK_IMPORTED_MODULE_12__["share"])(data);\n  }, []);\n  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_14__["jsx"])(react__WEBPACK_IMPORTED_MODULE_5___default.a.Fragment, null, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_14__["jsx"])(next_head__WEBPACK_IMPORTED_MODULE_4___default.a, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_14__["jsx"])("title", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, "".concat(_meta_config__WEBPACK_IMPORTED_MODULE_13__["default"].title, " - ").concat(title)), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_14__["jsx"])("meta", {\n    property: "og:logo",\n    content: "".concat(_meta_config__WEBPACK_IMPORTED_MODULE_13__["default"].siteUri, "/favicon.ico"),\n    key: "logo",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_14__["jsx"])("meta", {\n    property: "og:title",\n    content: title,\n    key: "title",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_14__["jsx"])("meta", {\n    property: "og:image",\n    content: "".concat(_meta_config__WEBPACK_IMPORTED_MODULE_13__["default"].siteUri).concat(cover),\n    key: "image",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_14__["jsx"])("meta", {\n    property: "og:image:width",\n    content: "1200",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_14__["jsx"])("meta", {\n    property: "og:image:height",\n    content: "630",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_14__["jsx"])("meta", {\n    property: "og:type",\n    content: "article",\n    key: "type",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_14__["jsx"])(LayoutContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_14__["jsx"])(_components_Navigation__WEBPACK_IMPORTED_MODULE_7__["default"], {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_14__["jsx"])(Article, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_14__["jsx"])(Section, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }, cover && Object(_emotion_react__WEBPACK_IMPORTED_MODULE_14__["jsx"])(_components_CoverImage__WEBPACK_IMPORTED_MODULE_6__["default"], {\n    src: cover,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 23\n    }\n  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_14__["jsx"])(Tags, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, tags === null || tags === void 0 ? void 0 : tags.map(function (_ref2) {\n    var slugOfTag = _ref2.slug,\n        name = _ref2.name;\n    return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_14__["jsx"])(Tag, {\n      key: slugOfTag,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }\n    }, name);\n  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_14__["jsx"])("header", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_14__["jsx"])(Title, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 15\n    }\n  }, title)), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_14__["jsx"])(Contents, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_14__["jsx"])(Markdown, {\n    dangerouslySetInnerHTML: {\n      __html: content\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 15\n    }\n  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_14__["jsx"])(ButtonContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_14__["jsx"])(LikeButton, {\n    onClick: toggleLike,\n    isLike: isLike,\n    className: "like-button",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 15\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_14__["jsx"])(_mdi_react__WEBPACK_IMPORTED_MODULE_2___default.a, {\n    className: "like-button",\n    path: isLike ? _mdi_js__WEBPACK_IMPORTED_MODULE_1__["mdiHeart"] : _mdi_js__WEBPACK_IMPORTED_MODULE_1__["mdiHeartOutline"],\n    color: isLike ? _styles__WEBPACK_IMPORTED_MODULE_8__["default"].grey40 : _styles__WEBPACK_IMPORTED_MODULE_8__["default"].blue300,\n    size: "20",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 17\n    }\n  }), "LIKE"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_14__["jsx"])(ShareButton, {\n    onClick: shareLink,\n    className: "share-button",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 15\n    }\n  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_14__["jsx"])(SvgIcon, {\n    src: "/icon/share.svg",\n    alt: "share",\n    height: "20",\n    width: "20",\n    className: "share-button",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 17\n    }\n  }), "SHARE"))))));\n};\n\n_s(Post, "FqSrkLEWZi5yRrMICIWGwtBl9Xk=", false, function () {\n  return [next_dist_client_router__WEBPACK_IMPORTED_MODULE_3__["useRouter"]];\n});\n\n_c = Post;\nvar __N_SSG = true;\n/* harmony default export */ __webpack_exports__["default"] = (Post);\n\nvar LayoutContainer = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("div", false ? undefined : {\n  target: "ep629fi11",\n  label: "LayoutContainer"\n})(false ? undefined : {\n  name: "bjn8wh",\n  styles: "position:relative",\n  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nvar SvgIcon = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("img", false ? undefined : {\n  target: "ep629fi10",\n  label: "SvgIcon"\n})(false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");\n\nvar Article = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("article", false ? undefined : {\n  target: "ep629fi9",\n  label: "Article"\n})(false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");\n\nvar Section = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("section", false ? undefined : {\n  target: "ep629fi8",\n  label: "Section"\n})(_styles_container_SectionContainer__WEBPACK_IMPORTED_MODULE_9__["default"], ";position:relative;padding-bottom:32px;", function (_ref3) {\n  var theme = _ref3.theme;\n  return theme.media.mobile;\n}, "{margin:0 16px;}" + (false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));\n\nvar Tags = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("div", false ? undefined : {\n  target: "ep629fi7",\n  label: "Tags"\n})(false ? undefined : {\n  name: "1d0nbku",\n  styles: "margin-top:24px",\n  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nvar Tag = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("span", false ? undefined : {\n  target: "ep629fi6",\n  label: "Tag"\n})(_styles_css__WEBPACK_IMPORTED_MODULE_10__["textGrey200"], " font-size:14px;font-weight:bold;line-height:1.57;margin-right:8px;" + (false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));\n\nvar Title = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("h1", false ? undefined : {\n  target: "ep629fi5",\n  label: "Title"\n})(_styles_css__WEBPACK_IMPORTED_MODULE_10__["textBlack"], " margin:8px 0 24px 0;font-size:26px;font-weight:bold;line-height:1.2;" + (false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));\n\nvar Contents = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("div", false ? undefined : {\n  target: "ep629fi4",\n  label: "Contents"\n})(_styles_css__WEBPACK_IMPORTED_MODULE_10__["textGrey300"], " font-size:16px;font-weight:normal;line-height:1.63;min-height:320px;" + (false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));\n\nvar Markdown = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("div", false ? undefined : {\n  target: "ep629fi3",\n  label: "Markdown"\n})(_styles_MarkdownStyle__WEBPACK_IMPORTED_MODULE_11__["default"], ";" + (false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));\n\nvar ButtonContainer = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("div", false ? undefined : {\n  target: "ep629fi2",\n  label: "ButtonContainer"\n})(_styles_css__WEBPACK_IMPORTED_MODULE_10__["flexColumn"], " ", _styles_css__WEBPACK_IMPORTED_MODULE_10__["justifyCenter"], " width:100%;margin-top:48px;button{", _styles_css__WEBPACK_IMPORTED_MODULE_10__["flex"], " ", _styles_css__WEBPACK_IMPORTED_MODULE_10__["alignCenter"], " ", _styles_css__WEBPACK_IMPORTED_MODULE_10__["justifyCenter"], " width:240px;height:48px;border:none;margin:8px auto;border-radius:4px;font-size:16px;font-weight:bold;padding:16px;position:relative;}" + (false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));\n\nvar LikeButton = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("button", false ? undefined : {\n  target: "ep629fi1",\n  label: "LikeButton"\n})(function (_ref4) {\n  var isLike = _ref4.isLike;\n  return isLike ? _styles_css__WEBPACK_IMPORTED_MODULE_10__["backgroundGrey30"] : _styles_css__WEBPACK_IMPORTED_MODULE_10__["backgroundBlue40"];\n}, " ", function (_ref5) {\n  var isLike = _ref5.isLike;\n  return isLike ? _styles_css__WEBPACK_IMPORTED_MODULE_10__["textGrey300"] : _styles_css__WEBPACK_IMPORTED_MODULE_10__["textBlue300"];\n}, " margin-bottom:16px;&>svg{position:absolute;left:16px;}" + (false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));\n\nvar ShareButton = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("button", false ? undefined : {\n  target: "ep629fi0",\n  label: "ShareButton"\n})(_styles_css__WEBPACK_IMPORTED_MODULE_10__["backgroundGrey30"], " ", _styles_css__WEBPACK_IMPORTED_MODULE_10__["textGrey300"], " &>img{position:absolute;left:16px;}" + (false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));\n\nvar _c;\n\n$RefreshReg$(_c, "Post");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we\'re in a\n    // browser context before continuing.\n    if (typeof self !== \'undefined\' &&\n        // AMP / No-JS mode does not inject these helpers:\n        \'$RefreshHelpers$\' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we\'ll check if it\'s\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we\'ll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it\'s possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/next/dist/compiled/webpack/harmony-module.js */ "./node_modules/next/dist/compiled/webpack/harmony-module.js")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/pages/posts/[slug].tsx\n'
      );

      /***/
    }
});
