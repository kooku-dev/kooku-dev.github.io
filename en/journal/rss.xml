<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Kooku's log Blog</title>
        <link>https://kooku0.github.io/en/journal</link>
        <description>Kooku's log Blog</description>
        <lastBuildDate>Thu, 08 Jun 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[2023.06.08]]></title>
            <link>https://kooku0.github.io/en/journal/2023/06/08/</link>
            <guid>https://kooku0.github.io/en/journal/2023/06/08/</guid>
            <pubDate>Thu, 08 Jun 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[1. 나는 많은게 귀찮다.]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-나는-많은게-귀찮다">1. 나는 많은게 귀찮다.<a href="#1-나는-많은게-귀찮다" class="hash-link" aria-label="Direct link to 1. 나는 많은게 귀찮다." title="Direct link to 1. 나는 많은게 귀찮다.">​</a></h2><p>나는 게을러서 손으로 하는걸 귀찮아 한다. 특히 단순노동, 반복작업등을 매우 싫어하는데 이런게 있을 때마다 자동화를 하려고 많이 노력한다.</p><p>대표적인게 테스트이고 여기서 테스트는 e2e 테스트이다. 배포하고 알파에서 기존기능들 잘 동작하는지 체크하는 작업이 너무 귀찮다. 배포할 때마다 배포태그 따기 -&gt; jira ticket 만들기 -&gt; slack 에 배포요청하기 이 3step을 진행하는데 이게 너무 귀찮아서 명령어 하나로 자동화가 되도록 작업중이다.</p><p>작업하게 되면 github js sdk, jira js sdk, slack js sdk를 모두 접하게 되는데 신선한 경헙이다 ㅎㅎ
단순 기능뿐 아니라 터미널에서 1,2,3 이렇게 선택해서 할 수 있는것도 만들 예정인데 재밌을 것 같긴한데.. 빨리 완성됐으면 ㅎㅎ</p><p><a href="https://github.com/romkatv/powerlevel10k" target="_blank" rel="noopener noreferrer">https://github.com/romkatv/powerlevel10k</a> 초기에 설정하는 것 처럼 하고 싶다.</p><ul><li>tag을 입력해주세요.</li><li>loop &gt; 배포할 project를 선택해 주세요. (1,2,3,4, end)</li><li>배포 담당자를 선택해주세요. (1,2)</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2023.06.07]]></title>
            <link>https://kooku0.github.io/en/journal/2023/06/07/</link>
            <guid>https://kooku0.github.io/en/journal/2023/06/07/</guid>
            <pubDate>Wed, 07 Jun 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[1. 올해 목표를 세워보자.]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-올해-목표를-세워보자">1. 올해 목표를 세워보자.<a href="#1-올해-목표를-세워보자" class="hash-link" aria-label="Direct link to 1. 올해 목표를 세워보자." title="Direct link to 1. 올해 목표를 세워보자.">​</a></h2><p>한 해 목표는 보통 새해 첫 날에 세우기 마련인데 나는 좀 늦게 정하게 되었다. 그때는 하고싶은게 뚜렷하지 않았기 때문이다. 그냥 일이나 열심히 해야지~ 돈이나 모아야지~ 생각했던 것 같다.</p><p>저번달 회사 문화의 날에 와인 시음을 해보고 급 관심을 가지게 되었다. 집에가서 유튜브 영상도 찾아보고 오늘 와인 책까지 사게 되었다. <code>와인 테이스팅 코스</code> 책인데 추천도 많이 했고 그림이 많아 이해하기 쉬워 보였다.</p><p>아무튼 올해 목표!</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="취미">[취미]<a href="#취미" class="hash-link" aria-label="Direct link to [취미]" title="Direct link to [취미]">​</a></h3><ol><li>WSET Level 2 따기</li><li>와인관련 앱 개발하기 (혼자서)</li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="회사">[회사]<a href="#회사" class="hash-link" aria-label="Direct link to [회사]" title="Direct link to [회사]">​</a></h3><ol start="3"><li>web-client project들 모두 하나로 합치기</li></ol><p>단 몇 일만에 정해버린 올해 목표지만 지금은 의욕이 넘친다. 가보자고~</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-flutter와-dart">2. Flutter와 Dart<a href="#2-flutter와-dart" class="hash-link" aria-label="Direct link to 2. Flutter와 Dart" title="Direct link to 2. Flutter와 Dart">​</a></h2><p>앱을 만들어보고 싶다고 회사 동료분께 이야기하자 Flutter를 추천해주셨다. 객체지향 쓰는게 마음에 들기도 했고 빠르게 배워서 개발할 수 있다길래 기대되었다. 이전에는 RN을 사용했는데 이게... native 기능을 사용하려면 쉽지 않고 버벅이는게 눈에 보였다. 그런데 Flutter는 조금 낫지 않을까? 생각이 드는데 이건 개발해봐야 알 것 같다.</p><p>니꼴라스 선생님 강의 Dart, Flutter 신청완료!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-일찍-자고-일찍-일어나자">3. 일찍 자고 일찍 일어나자<a href="#3-일찍-자고-일찍-일어나자" class="hash-link" aria-label="Direct link to 3. 일찍 자고 일찍 일어나자" title="Direct link to 3. 일찍 자고 일찍 일어나자">​</a></h2><p>규칙적인 생활을 하지 않으니 깨어있는 시간을 잘 사용하지 못하는 것 같다. 개인적으로 낭비되는 시간을 매우 싫어하기에 일찍자고 일찍 일어나는걸 실천해야하는데... 마음대로 되지가 않는다 ㅠ</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2023.06.06]]></title>
            <link>https://kooku0.github.io/en/journal/2023/06/06/</link>
            <guid>https://kooku0.github.io/en/journal/2023/06/06/</guid>
            <pubDate>Tue, 06 Jun 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[1. "타이탄의 도구들"을 읽고]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-타이탄의-도구들을-읽고">1. "타이탄의 도구들"을 읽고<a href="#1-타이탄의-도구들을-읽고" class="hash-link" aria-label="Direct link to 1. &quot;타이탄의 도구들&quot;을 읽고" title="Direct link to 1. &quot;타이탄의 도구들&quot;을 읽고">​</a></h2><p>지금 읽고 있는 책에 내가 겪은 고민들에 대한 내용이 나오다 보니 매우 공감하며 읽게 된다.</p><blockquote><p>"트랜드는 중요하지 않다. 미래의 삶에 가장 중요한 역할을 하는건 '사명감'이다."</p><p>어떤 트랜드가 생겨나면 곧장 엄청난 사람들이 몰려든다. 그리고 많은 사람들이 몰리면 경쟁은 치열해지는 반면 차별화는 약해진다. 따라서 1등을 차지하지 못하면 트렌드는 의미가 없다. 망한다는 건 '특정 트렌드의 n번째 순위'를 기록하면서 사라진다는 뜻이다. 트랜드를 탐색하는 시간을 대신해 우리는 '사명'을 찾아야 한다. 사명이란, 다른 사람들이 해결하지 못한 문제를 찾아내는 것이다. 다른 사람들은 엄두도 내지 못하는 문제를 해결하는 노력이다.</p><p>자신의 일과 사업, 아이디어를 시작하고자 하는 사람들이 스스로에게 던져야 할 두 개의 질문은</p><ul><li>첫째, 내가 매일 떠올리는 문제들 중 아직 아무도 해결하지 못한 것은 무엇인가?</li><li>둘째, '아직 아무도 세우지 않은 멋진 회사에 대한 아이디어는 무엇인가?'</li></ul></blockquote><p>최근에 시작한 프로젝트가 딱 트렌드를 쫓아 만들었던 것 같다. 최근 유행하는 아이디어에 타겟만 살짝 바꿔서 만들고 있다. 그런데 이런 유행이나 트랜드는 언젠가 식기 마련이고 다른 서비스와의 차별성은 점점 모호해질 것이다. 책에서 말했듯 1등이 아니면 사라질 것이 자명했다.</p><p>"타이탄의 도구들" 책이 아닌 서점을 둘러보다 잠깐 들어 읽었던 책에 이런 문장이 있었는데 기억에 남는다.(무슨 책인지는 기억이 안난다.) </p><blockquote><p>사업을 할때는 역사적으로 꾸준하게 사랑받아 왔던걸 해야한다. 시간이 지나고 유행이 바껴도 변하지 않는걸 해야한다. 오랜세월 꾸준하게 사랑을 받아온 클래식같은..</p></blockquote><p>사실 윗 문장은 그냥 그 책이 말했던 느낌만 담아 각색했다. 정확한 문장은 기억안나는데 말하고자 했던건 위와 비슷했다</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-fe-개발자가-spring-boot를-공부하고-느낀점">2. fe 개발자가 spring boot를 공부하고 느낀점<a href="#2-fe-개발자가-spring-boot를-공부하고-느낀점" class="hash-link" aria-label="Direct link to 2. fe 개발자가 spring boot를 공부하고 느낀점" title="Direct link to 2. fe 개발자가 spring boot를 공부하고 느낀점">​</a></h2><p>요즘 스프링을 공부하고 있다. <a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%EC%9E%85%EB%AC%B8-%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/dashboard" target="_blank" rel="noopener noreferrer">스프링 입문 - 코드로 배우는 스프링 부트, 웹 MVC, DB 접근 기술</a> 완강했고 <a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EA%B8%B0%EB%B3%B8%ED%8E%B8/dashboard" target="_blank" rel="noopener noreferrer">스프링 핵심 원리 - 기본편</a>는 60% 정도 들었다.</p><p>스프링을 공부하게된 이유를 말해보자면. 소프트웨어 공학 관련 저서들을 읽어 보면 대부분 백엔드 중심으로 쓰여졌다. 그래서 이를 프론트코드에 적용하려 노력해보지만 힘들기도 했고 참고할 만한 코드도 없다보니 흉내내서 개발하는 느낌이였다. 클린한 것 처럼 보이는 코드, solid를 꾸역꾸역 적용한 코드, 어디서 본 아키텍처를 흉내내어 적용한 코드를 작성했다. 책에서 소개된 개념과 방법들을 사용하기는 어려웠고 그 개념과 철할을 프론트 코드에 녹이려는 노력만 하게 되었던 것 같다. 이런 과정에서 저자가 말하려는 내용들, 그리고 널리 알려진 클린 아키텍처나 방법론들을 더욱 잘 이해하기 위해서 백엔드를 공부하게 되었다. 물론 이런 이유만 있는건 아니다. 혼자서 사이드 프로젝트를 만들고 싶기도 했고 백엔드 직군으로 전향 해보고 싶은 니즈도 조금은 있다.</p><p>스프링이 어떤건지는 "스프링 입문" 강의 하나로도 대부분 알게 되었던 것 같다. 스프링 빈과 의존관계 그리고 AOP는 충격이였다. 클래스 위에 annotation을 달아주는 것 만으로 스프링 컨테이너에 빈으로 등록되고 Configuration을 수정하는 것만으로 의존성을 자유롭게 주입하고 조립할 수 있었다. solid를 프론트에서 적용하면서 들었던 의문들... 의존성 역전원칙이 프론트에서 그렇게나 힘들었는데 스프링 사용하면 configuration만 수정하면 되었다. 너무나 쉬웠다. 그냥 스프링이 다해줬다. 프론트는 그런 라이브러리나 프레임워크가 없다. 그런걸 구현하려면 개발자가 코딩해야 했다. 그리고 관례적인 기법도 아니기에 여러 팀원들과 함께 개발하는 프로젝트라면 쉽지 않은 선택일 것이다.</p><p>스프링은 코드를 잘 설계할 수 있도록 발전 되었다면 react를 사용하는 프론트엔드 개발자는 dom을 만들고 js로 함수를 만들고 dom과 js를 직접 이어줘야 한다. 프레임워크가 해주는건 알아서 잘 렌더링해주고(변경이 많아도 모아서 한번에 렌더링 시킨다던가) 컴포넌트 라이프 사이클에 따른 훅을 제공해주는 것 뿐이다. 잘 설계하고 좋은 코드를 만들도록 발전한게 아닌 성능적인 부분을 개선시키기 위해 발전되었다. 아직 프론트 기술이 성숙하지 못했기 때문인 것 같기도하고 (관례적인 방식 같은게 없다. - service, controller, repository 같은..) 있어도 빠르게 바뀌고 누군가가 비판하며 새로운 걸 내고, 기존의 라이브러리 혹은 프레임워크가 업그레이드 되는게 아닌 deprecate 되어버리고 새로운게 나와버린다. 그래서 코드레벨에서 유지보수하게 잘 만들 수 있도록 발전되기는 커녕 다른 프레임워크에 먹힐까봐, 자리를 빼앗길 걱정에 성능을 개선하고 조금이라도 많은 기능을 개발하기에 급급한 것 같다는 생각이 든다.</p><p>김영한 선생님이 워낙 쉽게 가르쳐주시고 실무 경험 위주고 가르쳐 주셔서 좋았고, 백엔드 취준생의 느낌으로 공부하다 보니 재미도 있었던 것 같다. spring 재밌네.</p><hr><p><a href="https://github.com/kooku0/posting-review/blob/kooku/GuMinGyu/2023-06-06-react%EC%99%80-spring.md" target="_blank" rel="noopener noreferrer">Meet-Coder-Study/posting-review</a> 에 오늘 올린글인데 긁어왔다 ^^</p><p>추가로 백엔드 엔지니어 분께서 코멘트를 남겨주셨는데</p><blockquote><p>자바/스프링 공화국의 문제인거 같긴해요.. ㅋㅋㅋ</p><p>Spring Boot가 불편해보인다는건 없었을까요?? ㅋㅋㅋ 좋은점들만 적어주신거 같아서 ㅋㅋㅋ</p></blockquote><p>어쩌면 나는 새로운 프레임워크나 라이브러리가 빠르게 나오고 바뀌는데 조금은 지쳐 spring에 대한 좋은점만 보였던 것 같기도 하다. 최근에 진행하던 프로젝트에서 e2e 라이브러리를 선택할 때 cypress에서 playwright로 바꾸고, css 라이브러리도 stitches를 사용했다가 emotion을 사용했다가 이제는 module css, module scss로 바꾸려고 계획하고 있고 web-client 프로젝트들을 cra (webpack)을 사용하다 vite로 바꿨고 이제는 ssr(next)로 프레임워크를 바꾸려고 준비중이다. 이런거에 조금은 지치지 않았나싶다.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2023.06.05]]></title>
            <link>https://kooku0.github.io/en/journal/2023/06/05/</link>
            <guid>https://kooku0.github.io/en/journal/2023/06/05/</guid>
            <pubDate>Mon, 05 Jun 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[1. "타이탄의 도구들"을 읽고]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-타이탄의-도구들을-읽고">1. "타이탄의 도구들"을 읽고<a href="#1-타이탄의-도구들을-읽고" class="hash-link" aria-label="Direct link to 1. &quot;타이탄의 도구들&quot;을 읽고" title="Direct link to 1. &quot;타이탄의 도구들&quot;을 읽고">​</a></h2><blockquote><p>명상을 하는 이유는 명확하다. 현재 상황을 직시하고, 사소한 일에 예민하게 반응하지 않고, 침착한 태도를 유지하는데 도움이 되기 때문이다.</p><ul><li><strong>나는 생각한다.</strong> 결정을 내릴 때 좋은 원칙들을 갖는 것, 그리고 나와 다른 사람들을 위해 좋은 질문들을 갖는 것.</li><li><strong>나는 기다린다.</strong> 장기적인 계획을 기획할 수 있는 것. 멀리 보고 게임을 즐기는 것, 그리고 에너지를 낭비하지 않는 것.</li><li><strong>나는 금식한다.</strong> 어려움과 시련을 견딜 수 있는 것. 나 자신을 온전히 회복해 큰 고통에도 관용과 평정을 잃지 않는 것.</li></ul></blockquote><p>사람들 중에 감정적이고 빠르게 의사결정을 하는 사람이 있다. 좋은게 좋은거라고 생각하고 이해하지 않고 넘어가는 사람이 있다. 하지만 이런 식으로 하는 의사결정은 그 과정중에 실패하게 된다. 감정적이였기에 이성이 돌아오고 다시 생각하는 기회가 왔을 때는 후회할 수도 있고 놓친 부분으로 인해 힘든 상황이 생길 수 있다. 이해하지 않고 넘어갔기에 다른 기회가 생기거나 문제가 생겼을 때 기회를 잡지 못하고 문제를 해결하지 못할 상황이 생길 수 있다.</p><p>주변 똑똑한 사람들을 보면 침착하고 여유롭다. 작은 전투를 보는게 아니라 지휘관으로써 전쟁을 본다. 내가 생각하지 못했던 부분을 캐치하고, 끊임없이 질문하여 정말로 옳은 방향인지 결정한다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-사이드-프로젝트를-여러-번-하면서-느낀-점">2. 사이드 프로젝트를 여러 번 하면서 느낀 점<a href="#2-사이드-프로젝트를-여러-번-하면서-느낀-점" class="hash-link" aria-label="Direct link to 2. 사이드 프로젝트를 여러 번 하면서 느낀 점" title="Direct link to 2. 사이드 프로젝트를 여러 번 하면서 느낀 점">​</a></h2><p>사이드 프로젝트를 여러 번 하면서 느낀 점은 주제선정이 매우 중요하다는 점이다. 주제를 제대로 정하지 못하면 프로젝트를 진행하다가 이게 정말 옳은가? 라는 질문에 사로잡히게 된다. 나의 소중한 시간과 에너지는 낭비되고 같이 하는 팀원들 때문에 어쩔 수 없이 프로젝트에 참여해서 끌려다니게 될 뿐이다.</p><p>프로젝트 주제는 오랜시간 고민하고 질문하여 정해야한다. 빨리 개발해야하기 때문에 빨리 정해야 한다던가 유명 스타트업 시작 이야기를 들며 여러 아이디어롤 빠르게 돌려봐야한다는 망상에서 벗어나야 한다. 여러 아이디어들도 정말 괜찮은지 여러번 질문하고 의심하며 정했을 것이다. 지금 프로젝트를 진행중이라면 감정적으로, 유행에 따라서, 빨리빨리로 주제를 정하지는 않았는지 의심해 볼 필요가 있다. 만약 그렇다면 프로젝트 진행중에 엎어지거나 프로젝트가 완성되더라도 이어나갈 가능성이 거의없다고 생각한다.</p><p>이런 이야기를 바탕으로 사이드 프로젝트를 처음에 시작할 때는 혼자 시작하는게 맞는 것 같다. 여러명이서 시작하게 되면 혹여나 잘못 진행되어 피봇해야할 상황이 생겨도 그게 쉽지 않다. 누군가는 원망하는 사람이 생길 것이다. 혼자서 아이디어와 생각을 철저히 의심하고 질문하며 정한 후 검증되었을 때 팀원들을 모집하는게 맞다.</p><p>사이드 프로젝트는 개발하는게 아니다. 프로덕트를 만드는 것이고 그게 개발의 결과물이 아닐 수도 있다. 사이드 프로젝트는 처음에 시작할 때 개발을 하는건 정말 나중에 해야하는 거라고 말하고 싶다. 처음에는 노션이나 간단한 공유 페이지로 끝내고 유저가 모이고 검증이 완료되면 개발을 시작하여 제대로된 결과물을 만들어야 한다. 개발에 필요한 시간과 노력 그리고 에너지를 함부로 낭비했다가 일찍히 나가 떨어질 수 도 있다.</p>]]></content:encoded>
        </item>
    </channel>
</rss>