<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Kooku log Blog</title>
        <link>https://kooku0.gihub.io/en/retrospect</link>
        <description>Kooku log Blog</description>
        <lastBuildDate>Mon, 18 Oct 2021 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[2021년 10월 둘째 주 회고]]></title>
            <link>https://kooku0.gihub.io/en/retrospect/2021년-10월-둘째-주-회고</link>
            <guid>/2021년-10월-둘째-주-회고</guid>
            <pubDate>Mon, 18 Oct 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Facts (사실, 객관)]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="facts-사실-객관">Facts (사실, 객관)<a class="hash-link" href="#facts-사실-객관" title="Direct link to heading">​</a></h2><ul><li>개인 프로젝트 시작: 프로젝트 셋팅</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="feeling-느낌-주관">Feeling (느낌, 주관)<a class="hash-link" href="#feeling-느낌-주관" title="Direct link to heading">​</a></h2><ul><li>개인 프로젝트를 시작했다. cra와 TypeScript를 사용하지 않고 webpack 설정을 직접만지면서 하나씩 셋팅했는데 webpack을 셋팅하는 즐거움이 있었다.</li><li>코드숨에서는 e2e test를 codeceptjs를 이용해서 진행했었는데 codeceptjs를 한 번도 공부하거나 배운적은 없지만 이번 프로젝트를 하면서 조금식 공부해 볼 예정이다.</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="finding-배운-점-교훈">Finding (배운 점, 교훈)<a class="hash-link" href="#finding-배운-점-교훈" title="Direct link to heading">​</a></h2><ul><li>codeceptjs에서는 web driver를 선택해서 사용할 수 있다. 코드숨에서는 puppeteer를 사용했었는데, 예전 구글에 있던 puppeteer 팀이 마이크로소프트사로 팀 전체가 옮겨가서 잘 운영되고 있지는 않다고 들었다, 현재는 그 팀이 playwright를 개발하여 운영하고 있다는 걸로 알고있다.</li><li>webpack setting을 하다가 <a href="https://github.com/pmmmwh/react-refresh-webpack-plugin" target="_blank" rel="noopener noreferrer">react-refresh-webpack-plugin</a>에 대해 알게 되었다. React 에서 코드 수정이 발생했을 때 변경을 감지해 data를 건드리거나 refresh 하는게 아니라 해당 컴포넌트만 새로 렌더링하는건데 webpack에서 사용하면 매우 유용할 것 같다.</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="affirmation-자기-선언">Affirmation (자기 선언)<a class="hash-link" href="#affirmation-자기-선언" title="Direct link to heading">​</a></h2><ul><li>코드숨 과제를 처음부터 tdd로 개발한다고 생각하고 차근차근 해보려고 한다.</li></ul>]]></content:encoded>
            <category>회고</category>
        </item>
        <item>
            <title><![CDATA[2021년 10월 첫째 주 회고]]></title>
            <link>https://kooku0.gihub.io/en/retrospect/2021년-10월-첫째-주-회고</link>
            <guid>/2021년-10월-첫째-주-회고</guid>
            <pubDate>Thu, 07 Oct 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Facts (사실, 객관)]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="facts-사실-객관">Facts (사실, 객관)<a class="hash-link" href="#facts-사실-객관" title="Direct link to heading">​</a></h2><ul><li>코드숨 과제: emotion 다루기, redux-toolkit 다루기</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="feeling-느낌-주관">Feeling (느낌, 주관)<a class="hash-link" href="#feeling-느낌-주관" title="Direct link to heading">​</a></h2><ul><li>Redux-toolkit 을 사용했을 때 redux를 정말 쉽게 사용할 수 있어 좋아보였다.</li><li>emotion을 사용해봤는데 사용법은 쉽게 익혔으나, 어떻게 해야 잘 사용할 수 있을지 고민을 해볼 필요가 있었던 것 같다. 어떡해야 잘 사용할까..</li><li>이번 과제에서는 pr에서 css-in-js에 대해 의문을 트레이너님께 물어보는 형식으로 진행했는데 궁금즘을 많이 해소했다.</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="finding-배운-점-교훈">Finding (배운 점, 교훈)<a class="hash-link" href="#finding-배운-점-교훈" title="Direct link to heading">​</a></h2><ul><li>Css-in-js 도 테스트 코드를 작성하는가?<ul><li>스타일 컴포넌트는 디자인 쪽에 가깝기 때문에 디자인 시스템을 구축하여 스토리북을 이용해 관리한다.</li><li>찾아보니 <a href="https://www.chromatic.com/" target="_blank" rel="noopener noreferrer">chromatic</a>을 이용하여 visual test를 할 수 있다고 한다.</li></ul></li><li>Css-in-js도 스타일이기에 css 처럼 파일로 분리해야하지 않을까? view와 business-logic을 container와 분리시킨 것 처럼<ul><li>CSS in JS 를 사용하는 이유는 컴포넌트내에서 스타일을 처리해주기 때문에 독립적으로 관리가 가능하고, 따로 CSS 파일을 두지 않아도 되기 때문에 유지보수하기가 좋다. 따라서 보통 재사용되는 스타일만 따로 분리해서 사용한다. 재사용되지 않는 스타일 컴포넌트는 리액트 컴포넌트 파일 안에 정의하고 사용한다.</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="affirmation-자기-선언">Affirmation (자기 선언)<a class="hash-link" href="#affirmation-자기-선언" title="Direct link to heading">​</a></h2><ul><li>Css-in-js 를 어떻게 해야 잘 사용할지 고민을 해보자. storybook도 공부해보면 재미있을 것 같다.</li></ul>]]></content:encoded>
            <category>회고</category>
        </item>
        <item>
            <title><![CDATA[2021년 9월 넷째 주 회고]]></title>
            <link>https://kooku0.gihub.io/en/retrospect/2021년-9월-넷째-주-회고</link>
            <guid>/2021년-9월-넷째-주-회고</guid>
            <pubDate>Tue, 05 Oct 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Facts (사실, 객관)]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="facts-사실-객관">Facts (사실, 객관)<a class="hash-link" href="#facts-사실-객관" title="Direct link to heading">​</a></h2><ul><li>코드숨 과제: 로그인</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="feeling-느낌-주관">Feeling (느낌, 주관)<a class="hash-link" href="#feeling-느낌-주관" title="Direct link to heading">​</a></h2><ul><li>지금까지 배운내용을 바탕으로 다른 프로젝트에서도 테스트를 원할히 작성할 수 있을 것 같다는 자신감이 생겼다.</li><li>TDD.. 여전히 어렵지만 그래도 흉내는 낼 수 있게 되었다.</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="finding-배운-점-교훈">Finding (배운 점, 교훈)<a class="hash-link" href="#finding-배운-점-교훈" title="Direct link to heading">​</a></h2><ul><li>Given 라이브러리를 통해 쉽게 테스트를 할 수 있다. useSelector의 store 데이터 mocking을 lazy하게 처리한다.</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="affirmation-자기-선언">Affirmation (자기 선언)<a class="hash-link" href="#affirmation-자기-선언" title="Direct link to heading">​</a></h2><ul><li>이번주 화이팅!</li></ul>]]></content:encoded>
            <category>회고</category>
        </item>
        <item>
            <title><![CDATA[2021년 9월 셋째 주 회고]]></title>
            <link>https://kooku0.gihub.io/en/retrospect/2021년-9월-셋째-주-회고</link>
            <guid>/2021년-9월-셋째-주-회고</guid>
            <pubDate>Sun, 19 Sep 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Facts (사실, 객관)]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_mojV" id="facts-사실-객관">Facts (사실, 객관)<a class="hash-link" href="#facts-사실-객관" title="Direct link to heading">​</a></h3><ul><li>코드숨 과제: 레스토랑 상세 구현하기</li><li>Posting-review 스터디 끝</li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="feeling-느낌-주관">Feeling (느낌, 주관)<a class="hash-link" href="#feeling-느낌-주관" title="Direct link to heading">​</a></h3><ul><li>Test 코드 작성할 때 여러 라이브러리들을 mocking하는 방법들이 어려웠다. Mocking 하는 방법이나 원리를 익혀봐야할 것 같다.</li><li>저번주에 작성하고 강의로 배운 것과 이번주차에서 주어진 작성된 코드를 비교해봤을 때 차이가 많이 나서 당황했다. 작성한 코드의 부실함이 돋보였던 것 같다.</li><li>이번 주차 강의를 들으면서 test 코드 작성법 뿐 아니라 코드 작성법까지 익혔던 것 같다. 항상 해당 컴포넌트에서 useParams나 useHistory 썼었는데 상위에서 내려주게 함으로써 test도 용이하게 작성하는게 인상깊었다.</li><li>개인적으로 posting-review 스터디를 10주간 진행했는데, 오늘 마지막 회고를 하였다. 이 스터디는 “공부한 내용들을 정리해야겠다”라고 생각만 하고 안해서 등록한 스터디인데, 확실히 공부한 내용을 글로 정리해보는게 머릿속에 오래 남기도하고 도움이 많이 되었다. (글로 정리하면 말로 설명할 때 잘 설명할 수 있었다)</li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="finding-배운-점-교훈">Finding (배운 점, 교훈)<a class="hash-link" href="#finding-배운-점-교훈" title="Direct link to heading">​</a></h3><ul><li>Redux thunk 를 mocking하기 위해 <code>redux-mock-store</code> 를 사용할 수 있다.</li><li>mocking을 하고 다른 testcase에서 사용될 수 있기에 <code>mock.clear</code>를 해주는게 항상 필요하다.</li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="affirmation-자기-선언">Affirmation (자기 선언)<a class="hash-link" href="#affirmation-자기-선언" title="Direct link to heading">​</a></h3><ul><li>연휴동안 지금까 작성한 코드들을 처음부터 작성해보며 익히.</li></ul>]]></content:encoded>
            <category>회고</category>
        </item>
        <item>
            <title><![CDATA[2021년 9월 둘째 주 회고]]></title>
            <link>https://kooku0.gihub.io/en/retrospect/2021년-9월-둘째-주-회고</link>
            <guid>/2021년-9월-둘째-주-회고</guid>
            <pubDate>Mon, 13 Sep 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Facts (사실, 객관)]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="facts-사실-객관">Facts (사실, 객관)<a class="hash-link" href="#facts-사실-객관" title="Direct link to heading">​</a></h2><ul><li>코드숨 과제 1: 레스토랑 조회 구현하기</li><li>이번과제는 제대로 수행하지 못했다.</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="feeling-느낌-주관">Feeling (느낌, 주관)<a class="hash-link" href="#feeling-느낌-주관" title="Direct link to heading">​</a></h2><ul><li>이전 주차와 마찬가지로 TDD 개발방법론으로 개발을 진행했으나 많이 어려웠었다. 그래서 TDD로 개발하려고 하면서 고민했던 부분들을 모아 질문을 했고, 트레이너 님의 답변으로 TDD에 대해 조금은 알게 되었다.</li><li>테스트 주도개발(TDD) 책을 읽어봐야 TDD에 대해 확실히 알 것 같다!!</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="finding-배운-점-교훈">Finding (배운 점, 교훈)<a class="hash-link" href="#finding-배운-점-교훈" title="Direct link to heading">​</a></h2><ul><li>TDD를 작은 사이클로 진행하자. 그래야 변경하기도 쉽고 변경해야할 부분도 잘 보인다.</li><li>컴포넌트 분리는 기능을 모두 구현한 다음에 진행해보자.</li><li>처음부터 완벽하게 만들려고 하지말고, 지금 구조에서 최선을 다하자.</li><li><img src="/en/assets/images/codesoom-w5-code-review-09c44cfd70e413aef66d8dfd3ea2c92c.png" width="1472" height="1336"></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="affirmation-자기-선언">Affirmation (자기 선언)<a class="hash-link" href="#affirmation-자기-선언" title="Direct link to heading">​</a></h2><ul><li>추석이 끝나고 테스트 주도 개발 (TDD) 책 꼭 사서 읽어보자!</li><li>이번주차는 처음부터 끝까지 TDD로 제대로 구현해보자!💪</li></ul>]]></content:encoded>
            <category>회고</category>
        </item>
        <item>
            <title><![CDATA[2021년 9월 첫째 주 회고]]></title>
            <link>https://kooku0.gihub.io/en/retrospect/2021년-9월-첫째-주-회고</link>
            <guid>/2021년-9월-첫째-주-회고</guid>
            <pubDate>Sun, 05 Sep 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Facts (사실, 객관)]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="facts-사실-객관">Facts (사실, 객관)<a class="hash-link" href="#facts-사실-객관" title="Direct link to heading">​</a></h2><ul><li>코드숨 과제 1: To-Do 리스트 Redux를 사용해 리팩터링 하기</li><li>코드숨 과제 2: 레스토랑 정보 확인 및 예약 시스템 구축하기</li><li>HTTP3 간단히 공부</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="feeling-느낌-주관">Feeling (느낌, 주관)<a class="hash-link" href="#feeling-느낌-주관" title="Direct link to heading">​</a></h2><ul><li>이전 주차에서는 redux 테스트코드 짜는걸 처음접해봐서 재미있기도 했고 이제 테스트코드 짜는걸 조금 알겠다 싶었다. 그런데 이전 과제를 보지않고 다시 테스트 코드를 짜려고 하니 어떻게 테스트 코드를 짰었는지 까먹어서 많이 헤맸다… 결국 이전에 작성한 코드를 살짝 보면서 코딩을 했는데, 왜 테스트 코드를 반복해서 짜보라고 하셨는지 이해가 되었다.</li><li>처음부터 끝까지 TDD로 구현을 하려고 시도했는데.. 마음처럼 되지 않았다. 구현부터 진행하는게 익숙해져서 테스트코드를 먼저 짠다는게 쉽지 않았다. 첫 pr 후 피드백 받은 내용은 미리 예상해서 컴포넌트를 만들지 말고 테스트 -&gt; 구현 -&gt; 리펙터링의 과정을 거쳐 컴포넌트를 나누라고 하셨다. 그래서 프로젝트 코드를 다지우고 App 파일에 먼저 구현하고 진행하려고 했는데 쉽지 않았다. 어떻게 짜야할지 머릿속에 조금은 그려지니 TDD로 개발을 해야하는데 이미 구조를 짜놓고 개발을 시작해버렸다… 이전의 습관을 버리고 TDD로 개발을 하기 위해 계속 시도해봐야 겠다.</li><li>이번주에 짬내서 HTTP3에 대해 공부를 했는데, 전세계 웹사이트의 21.3%가 이미 http3를 사용하고 있다고 한다. 아직 http3는 계획단계로 알고 있었는데 크롬에서는 2020년 4월부터 정식으로 지원했다고 하니… 깜짝 놀랐다.</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="findings-배운-점-교훈">Findings (배운 점, 교훈)<a class="hash-link" href="#findings-배운-점-교훈" title="Direct link to heading">​</a></h2><ul><li>TDD는 테스트 -&gt; 구현 -&gt; 리펙터링의 사이클을 가진다. 미리 구조를 생각하고 개발을 하지말고, 리펙터링의 과정 때 컴포넌트를 나누어야 한다.</li><li>HTTP/3은 UDP기반 QUIC 프로토콜을 사용한다. 3-way-handshack가 없으니 연결속도가 TCP에 비해 50% 빠르다. 이에 CDN 서비스 제공업체가 가장먼저 HTTP/3을 도입했는데 초당 요청을 처리하는 횟수도 50% 이상 높아졌다고 한다.</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="affirmation-자기-선언">Affirmation (자기 선언)<a class="hash-link" href="#affirmation-자기-선언" title="Direct link to heading">​</a></h2><ul><li>매일매일 꾸준하게 공부하자. 공부는 복리로 나를 성장시킨다.</li><li>이전의 습관을 버리고 TDD로 생각하는 법을 익히자!</li></ul>]]></content:encoded>
            <category>회고</category>
        </item>
        <item>
            <title><![CDATA[2021년 8월 넷째 주 회고]]></title>
            <link>https://kooku0.gihub.io/en/retrospect/2021년-8월-넷째-주-회고</link>
            <guid>/2021년-8월-넷째-주-회고</guid>
            <pubDate>Mon, 30 Aug 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Facts (사실, 객관)]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="facts-사실-객관">Facts (사실, 객관)<a class="hash-link" href="#facts-사실-객관" title="Direct link to heading">​</a></h2><ul><li>처음으로 테스트 코드를 작성해보았다. (TDD, BDD)</li><li>팩토리 패턴과 빌더 패턴에 대해 공부했다.</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="feelings-느낌-주관">Feelings (느낌, 주관)<a class="hash-link" href="#feelings-느낌-주관" title="Direct link to heading">​</a></h2><ul><li>테스트코드의 중요성은 어느정도 알고 있었기에 조금씩 공부는 했으나 BDD 관점으로 사용해본적은 처음이어서 많이 헤매었다.</li><li>TDD 테스트 주도 개발 책을 읽어봐야겠다는 생각이 들었다.</li><li>프론트엔드에서도 data 상태에 따라 스타일, 텍스트, 행동 등이 나뉘는 경우가 있는데 이럴 때 팩토리 패턴을 사용하면 훨씬 편할 것 같다는 생각이 들었다.</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="findings-배운-점-교훈">Findings (배운 점, 교훈)<a class="hash-link" href="#findings-배운-점-교훈" title="Direct link to heading">​</a></h2><table><thead><tr><th align="center">키워드</th><th align="center">설명</th></tr></thead><tbody><tr><td align="center">Describe</td><td align="center">설명할 테스트 대상을 명시한다.</td></tr><tr><td align="center">Context</td><td align="center">테스트 대상이 놓인 상황을 설명한다.</td></tr><tr><td align="center">It</td><td align="center">테스트 대상의 기대되는 행동을 명시한다.</td></tr></tbody></table><ul><li>BDD로 테스트코드를 작성하면 시나리오 대로 케이스를 작성할 수 있어 놓치는 부분이나 에러케이스들을 모두 확인할 수 있다.</li><li>테스트 코드를 짜게되면 유지보수할 때 와 리펙토링 할 때 side-effect를 염려하지 않고 개발할 수 있다.</li><li>팩토리 패턴은 파생클래스(자식클래스)들을 switch case를 이용해 인스턴스를 생성해준다.</li><li>빌더 패턴은 생성자에 모든 값을 넣어주지 않고 체이닝등을 통해 인스턴스를 빌드(생성)한다.</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="affirmation자기-선언">Affirmation(자기 선언)<a class="hash-link" href="#affirmation자기-선언" title="Direct link to heading">​</a></h2><ul><li>지금 부터 작성하는 코드들은 모두 TDD, BDD를 적용하자!</li><li>다른 패턴들도 공부해보고 어떤 문제 상황일 때 적용할 수 있을지 고민해보자.</li></ul>]]></content:encoded>
            <category>회고</category>
        </item>
        <item>
            <title><![CDATA[2021년 8월 셋째 주 회고]]></title>
            <link>https://kooku0.gihub.io/en/retrospect/2021년-8월-셋째-주-회고</link>
            <guid>/2021년-8월-셋째-주-회고</guid>
            <pubDate>Sun, 22 Aug 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Facts (사실, 객관)]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="facts-사실-객관">Facts (사실, 객관)<a class="hash-link" href="#facts-사실-객관" title="Direct link to heading">​</a></h2><ul><li>코드숨 2주차 과제를 끝냈다.</li><li>오브젝트 책 3장, 4장 읽었다.</li><li>리펙토링 2판 6.7장 까지 읽었다.</li><li>HTTP Caching에 대해 공부했다.</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="feelings-느낌-주관">Feelings (느낌, 주관)<a class="hash-link" href="#feelings-느낌-주관" title="Direct link to heading">​</a></h2><p>스터디를 여러개 하고 있어 열심히 살고 있다는 생각이 드는 것 같다. 버거운 느낌이 들어 몇 개는 하지말까 라는 생각도 들었지만 스터디에서 작은 것들이라도 얻는게 있어 포기하기에는 너무 아까운 것 같다. 시작한 이상 열심히 해보려고 한다.</p><p>오브젝트 책 3장을 정말 재미있게 읽었다. 그리고 내가 지금까지 객체를 잘 못 만들고 있었다는 것을 알게되었고 남은 부분도 빨리 읽고 싶어졌다.</p><p>아 그리고 최근에 객체지향에 관심을 많이 가져 다른 부분을 공부하지 못했는데 JS prototype에 대해 조금 더 깊게 공부해보려고 한다.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="findings-배운-점">Findings (배운 점)<a class="hash-link" href="#findings-배운-점" title="Direct link to heading">​</a></h2><p>HTTP Caching에 대해 공부했는데, 왜 이걸 이제야 공부했지 라는 생각이 들었다. <code>cache-control</code>과 200(from disk, from,memory) 304 등...알고나니 눈에 많은 것들이 보이기 시작했다.\
객체는 데이터중심이 아니라 행동중심으로 설계되어야한다.\
리펙토링 책은 1~4장 때는 배울게 많았는데(리펙토링을 해야하는 이유와 했을 때 좋아지는 걸 코드로 보여준다.) 5장부터는 리펙토링 방법들을 예시로 보여주기에 재미는 많이 없었다.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="affirmation-자기-선언">Affirmation (자기 선언)<a class="hash-link" href="#affirmation-자기-선언" title="Direct link to heading">​</a></h2><p>후회하지 않도록 열심히 해보자.\
내 실력에 자신감이 생기도록.</p>]]></content:encoded>
            <category>회고</category>
        </item>
        <item>
            <title><![CDATA[2021년 8월 둘째 주 회고]]></title>
            <link>https://kooku0.gihub.io/en/retrospect/2021년-8월-둘째-주-회고</link>
            <guid>/2021년-8월-둘째-주-회고</guid>
            <pubDate>Mon, 16 Aug 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[최근에 개발을 하며 누군가에게 피드백을 받아보고 싶다는 생각이 많이 들었다. 나의 실력이 제자리 걸음을 하고 있다는 생각도 들었고, 책에서 이야기하는 이론을 바탕으로 실제 코드를 작성했을 때 단지 흉내만 내고 있는지, 개발 철학을 반영하여 개발하고 있는지 궁금했다.]]></description>
            <content:encoded><![CDATA[<p>최근에 개발을 하며 누군가에게 피드백을 받아보고 싶다는 생각이 많이 들었다. 나의 실력이 제자리 걸음을 하고 있다는 생각도 들었고, 책에서 이야기하는 이론을 바탕으로 실제 코드를 작성했을 때 단지 흉내만 내고 있는지, 개발 철학을 반영하여 개발하고 있는지 궁금했다.
이러한 상황에 코드숨은 나에게 좋은 기회였고, 코드숨 1주차가 지나갔다.</p><p>첫 과제는 어렵지 않았다. (2번 과제는 제대로 수행하지 못했다.ㅠㅠ)\
빠르게 완료해서 제출을 했다. 그런데 이렇게 이 과제를 끝내기에는 너무 아쉬웠다. 책에서 읽었던 내용을 이 간단한 코드에 적용해보고 싶다는 생각이 들어 함수를 쪼개고 side-effect를 줄이고, 유연하게 만들고자 시도를 하기 시작했다.
이런 시도를 하면서 이전 코드보다 훨씬 더 많은 피드백을 받을 수 있었고 나의 부족한 부분을 찾아가는 과정이 되었다.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="부족했던-것들">부족했던 것들<a class="hash-link" href="#부족했던-것들" title="Direct link to heading">​</a></h3><ul><li>여러가지 이유로 과제에 시간을 많이 쏟지 못했다. \
: 하루에 1시간씩은 과제에 투자하자.</li><li>익숙함에 기본적인 것들을 지나치는 경우가 있었다. (반복되는 로직을 그대로 사용등) \
: 익숙함에 길들여져 기본을 무시하지는 말자.</li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="앞으로도-유지해야할-것들">앞으로도 유지해야할 것들<a class="hash-link" href="#앞으로도-유지해야할-것들" title="Direct link to heading">​</a></h3><ul><li>많은 시도를 해보자. 많은 시도를 했을 때 많은 피드백을 들을 수 있고, 그게 나를 성장시킨다.</li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="배운-것">배운 것<a class="hash-link" href="#배운-것" title="Direct link to heading">​</a></h3><ul><li>코드는 사용하는 쪽을 최우선으로 고려하여 작성하자. 좋은 설계는 변화에 대응하기 좋은 상태를 만들어 낸다.</li><li>관심사의 분리: 경계를 잘 나누어야한다. (아직 경계를 발견해서 나누는 것이 익숙하지 않은데 이건 계속 연습해봐야할 것 같다.)</li><li>guard clauses (if else switch는 해롭다.)\
: 클린코드를 읽어보자 💪</li></ul>]]></content:encoded>
            <category>회고</category>
        </item>
    </channel>
</rss>